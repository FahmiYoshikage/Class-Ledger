App.jsx
import React, { useState, useEffect } from 'react';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import {
    Wallet,
    Users,
    TrendingUp,
    TrendingDown,
    AlertCircle,
    CheckCircle,
    Plus,
    Trash2,
    RefreshCw,
    Search,
    Filter,
    Download,
    FileText,
    Bell,
} from 'lucide-react';
import Settings from './components/Settings';
import {
    studentsAPI,
    paymentsAPI,
    expensesAPI,
    settingsAPI,
} from './services/api';
import EventManagement from './components/EventManagement';
import CustomPayment from './components/CustomPayment';
import NotificationManager from './components/NotificationManager';

const App = () => {
    const [students, setStudents] = useState([]);
    const [payments, setPayments] = useState([]);
    const [expenses, setExpenses] = useState([]);
    const [startDate, setStartDate] = useState(new Date('2025-10-27'));
    const [activeTab, setActiveTab] = useState('dashboard');
    const [showAddStudent, setShowAddStudent] = useState(false);
    const [showEditStudent, setShowEditStudent] = useState(false);
    const [editingStudent, setEditingStudent] = useState(null);
    const [showPayment, setShowPayment] = useState(false);
    const [showExpense, setShowExpense] = useState(false);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // Filter & Search states
    const [searchQuery, setSearchQuery] = useState('');
    const [filterStatus, setFilterStatus] = useState('Semua');
    const [filterMethod, setFilterMethod] = useState('Semua');
    const [filterCategory, setFilterCategory] = useState('Semua');
    const [dateFrom, setDateFrom] = useState('');
    const [dateTo, setDateTo] = useState('');

    // Load data from backend
    useEffect(() => {
        loadAllData();
    }, []);

    const loadAllData = async () => {
        setLoading(true);
        setError(null);
        try {
            const [studentsRes, paymentsRes, expensesRes] = await Promise.all([
                studentsAPI.getAll(),
                paymentsAPI.getAll(),
                expensesAPI.getAll(),
            ]);

            setStudents(studentsRes.data);
            setPayments(paymentsRes.data);
            setExpenses(expensesRes.data);
        } catch (err) {
            setError('Gagal memuat data. Pastikan server berjalan.');
            console.error('Error loading data:', err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadStartDate();
    }, []);

    const loadStartDate = async () => {
        try {
            const response = await settingsAPI.get('start_date');
            if (response.data?.value) {
                setStartDate(new Date(response.data.value));
            }
        } catch (err) {
            console.log('Using default start date');
        }
    };

    const getCurrentWeek = () => {
        const now = new Date();
        const days = Math.floor((now - startDate) / (24 * 60 * 60 * 1000));
        const weeks = Math.ceil(days / 7);

        if (weeks < 0) return 0;
        return weeks + 1;
    };

    const currentWeek = getCurrentWeek();

    const handleStartDateChange = (newStartDate) => {
        setStartDate(newStartDate);
        // Reload data untuk recalculate
        loadAllData();
    };

    // Add student
    const addStudent = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        try {
            const newStudent = {
                name: formData.get('name'),
                absen: parseInt(formData.get('absen')),
                status: 'Aktif',
                phoneNumber: formData.get('phoneNumber') || '',
                enableNotification: formData.get('enableNotification') === 'on',
            };

            const response = await studentsAPI.create(newStudent);
            setStudents([...students, response.data]);
            setShowAddStudent(false);
            e.target.reset();
        } catch (err) {
            alert('Gagal menambah siswa: ' + err.response?.data?.message);
        }
    };

    // Edit student
    const openEditStudent = (student) => {
        setEditingStudent(student);
        setShowEditStudent(true);
    };

    const updateStudent = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        try {
            const updatedData = {
                name: formData.get('name'),
                absen: parseInt(formData.get('absen')),
                status: formData.get('status'),
                phoneNumber: formData.get('phoneNumber') || '',
                enableNotification: formData.get('enableNotification') === 'on',
            };

            const response = await studentsAPI.update(
                editingStudent._id,
                updatedData
            );
            setStudents(
                students.map((s) =>
                    s._id === editingStudent._id ? response.data : s
                )
            );
            setShowEditStudent(false);
            setEditingStudent(null);
        } catch (err) {
            alert('Gagal mengupdate siswa: ' + err.response?.data?.message);
        }
    };

    // Delete student
    const deleteStudent = async (id) => {
        if (window.confirm('Yakin ingin menghapus siswa ini?')) {
            try {
                await studentsAPI.delete(id);
                setStudents(students.filter((s) => s._id !== id));
            } catch (err) {
                alert('Gagal menghapus siswa: ' + err.response?.data?.message);
            }
        }
    };

    // Add payment quick
    const addPaymentQuick = async (studentId) => {
        try {
            const newPayment = {
                studentId: studentId,
                amount: 2000,
                date: new Date().toISOString(),
                week: currentWeek,
                method: 'Tunai',
                note: '',
            };

            const response = await paymentsAPI.create(newPayment);
            setPayments([response.data, ...payments]);
        } catch (err) {
            alert('Gagal menambah pembayaran: ' + err.response?.data?.message);
        }
    };

    // Add payment manual
    const addPayment = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        try {
            const newPayment = {
                studentId: formData.get('student'),
                amount: parseInt(formData.get('amount')),
                date: formData.get('date'),
                week: currentWeek,
                method: formData.get('method'),
                note: formData.get('note'),
            };

            const response = await paymentsAPI.create(newPayment);
            setPayments([response.data, ...payments]);
            setShowPayment(false);
            e.target.reset();
        } catch (err) {
            alert('Gagal menambah pembayaran: ' + err.response?.data?.message);
        }
    };

    // Add expense
    const addExpense = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        try {
            const newExpense = {
                purpose: formData.get('purpose'),
                amount: parseInt(formData.get('amount')),
                date: formData.get('date'),
                category: formData.get('category'),
                approvedBy: formData.get('approvedBy'),
            };

            const response = await expensesAPI.create(newExpense);
            setExpenses([response.data, ...expenses]);
            setShowExpense(false);
            e.target.reset();
        } catch (err) {
            alert('Gagal menambah pengeluaran: ' + err.response?.data?.message);
        }
    };

    // Delete payment
    const deletePayment = async (id) => {
        if (window.confirm('Yakin ingin menghapus pembayaran ini?')) {
            try {
                await paymentsAPI.delete(id);
                setPayments(payments.filter((p) => p._id !== id));
            } catch (err) {
                alert(
                    'Gagal menghapus pembayaran: ' + err.response?.data?.message
                );
            }
        }
    };

    // Delete expense
    const deleteExpense = async (id) => {
        if (window.confirm('Yakin ingin menghapus pengeluaran ini?')) {
            try {
                await expensesAPI.delete(id);
                setExpenses(expenses.filter((e) => e._id !== id));
            } catch (err) {
                alert(
                    'Gagal menghapus pengeluaran: ' +
                        err.response?.data?.message
                );
            }
        }
    };

    // ===== FILTER & SEARCH FUNCTIONS =====

    // Filter students by search query and status
    const filteredStudents = students.filter((student) => {
        const matchSearch =
            student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            student.absen.toString().includes(searchQuery);
        const matchStatus =
            filterStatus === 'Semua' || student.status === filterStatus;
        return matchSearch && matchStatus;
    });

    // Filter payments by search, method, and date
    const filteredPayments = payments.filter((payment) => {
        // Fix: Cek studentId bisa berupa object atau string
        const studentId = payment.studentId?._id || payment.studentId;
        const student = students.find((s) => s._id === studentId);

        const matchSearch = student
            ? student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
              student.absen.toString().includes(searchQuery)
            : true; // Jika tidak ada filter search, tampilkan semua

        const matchMethod =
            filterMethod === 'Semua' || payment.method === filterMethod;

        const paymentDate = new Date(payment.date);
        const fromDate = dateFrom ? new Date(dateFrom) : null;
        const toDate = dateTo ? new Date(dateTo + 'T23:59:59') : null;

        const matchDate =
            (!fromDate || paymentDate >= fromDate) &&
            (!toDate || paymentDate <= toDate);

        return matchSearch && matchMethod && matchDate;
    });

    // Filter expenses by search, category, and date
    const filteredExpenses = expenses.filter((expense) => {
        const matchSearch =
            expense.purpose.toLowerCase().includes(searchQuery.toLowerCase()) ||
            expense.approvedBy
                .toLowerCase()
                .includes(searchQuery.toLowerCase());
        const matchCategory =
            filterCategory === 'Semua' || expense.category === filterCategory;
        const matchDate =
            (!dateFrom || new Date(expense.date) >= new Date(dateFrom)) &&
            (!dateTo || new Date(expense.date) <= new Date(dateTo));
        return matchSearch && matchCategory && matchDate;
    });

    // Get students who haven't paid this week (Tunggakan)
    const getUnpaidStudents = () => {
        const paidStudentsThisWeek = payments
            .filter((p) => p.week === currentWeek)
            .map((p) => p.studentId);
        return students.filter(
            (s) => s.status === 'Aktif' && !paidStudentsThisWeek.includes(s._id)
        );
    };

    // ===== EXPORT FUNCTIONS =====

    // Export Students to Excel
    const exportStudentsToExcel = () => {
        const data = students.map((student) => ({
            'No. Absen': student.absen,
            Nama: student.name,
            Status: student.status,
            'Total Bayar': getTotalPaid(student._id),
            Tunggakan: getTunggakan(student._id),
        }));

        const ws = XLSX.utils.json_to_sheet(data);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Data Siswa');

        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
        const blob = new Blob([excelBuffer], {
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        });
        saveAs(
            blob,
            `Data-Siswa-${new Date().toISOString().split('T')[0]}.xlsx`
        );
    };

    // Export Payments to Excel
    const exportPaymentsToExcel = () => {
        const data = payments.map((payment) => ({
            Tanggal: new Date(payment.date).toLocaleDateString('id-ID'),
            Nama: payment.studentId?.name || '-',
            Jumlah: payment.amount,
            Metode: payment.method,
            Minggu: payment.week,
            Catatan: payment.note || '-',
        }));

        const ws = XLSX.utils.json_to_sheet(data);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Pembayaran');

        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
        const blob = new Blob([excelBuffer], {
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        });
        saveAs(
            blob,
            `Pembayaran-${new Date().toISOString().split('T')[0]}.xlsx`
        );
    };

    // Export Expenses to Excel
    const exportExpensesToExcel = () => {
        const data = expenses.map((expense) => ({
            Tanggal: new Date(expense.date).toLocaleDateString('id-ID'),
            Keperluan: expense.purpose,
            Jumlah: expense.amount,
            Kategori: expense.category,
            'Disetujui Oleh': expense.approvedBy,
        }));

        const ws = XLSX.utils.json_to_sheet(data);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Pengeluaran');

        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
        const blob = new Blob([excelBuffer], {
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        });
        saveAs(
            blob,
            `Pengeluaran-${new Date().toISOString().split('T')[0]}.xlsx`
        );
    };

    // Export Complete Report to Excel (All in One)
    const exportCompleteReport = () => {
        // Sheet 1: Summary
        const summary = [
            { Keterangan: 'Total Siswa', Nilai: students.length },
            { Keterangan: 'Total Pemasukan', Nilai: totalKasMasuk },
            { Keterangan: 'Total Pengeluaran', Nilai: totalKasKeluar },
            { Keterangan: 'Saldo Kas', Nilai: saldoKas },
            {
                Keterangan: 'Siswa Belum Bayar',
                Nilai: getUnpaidStudents().length,
            },
            { Keterangan: 'Minggu Ke', Nilai: currentWeek },
        ];
        const wsSummary = XLSX.utils.json_to_sheet(summary);

        // Sheet 2: Students
        const studentsData = students.map((student) => ({
            'No. Absen': student.absen,
            Nama: student.name,
            Status: student.status,
            'Total Bayar': getTotalPaid(student._id),
            Tunggakan: getTunggakan(student._id),
        }));
        const wsStudents = XLSX.utils.json_to_sheet(studentsData);

        // Sheet 3: Payments
        const paymentsData = payments.map((payment) => ({
            Tanggal: new Date(payment.date).toLocaleDateString('id-ID'),
            Nama: payment.studentId?.name || '-',
            Jumlah: payment.amount,
            Metode: payment.method,
            Minggu: payment.week,
        }));
        const wsPayments = XLSX.utils.json_to_sheet(paymentsData);

        // Sheet 4: Expenses
        const expensesData = expenses.map((expense) => ({
            Tanggal: new Date(expense.date).toLocaleDateString('id-ID'),
            Keperluan: expense.purpose,
            Jumlah: expense.amount,
            Kategori: expense.category,
        }));
        const wsExpenses = XLSX.utils.json_to_sheet(expensesData);

        // Create workbook
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, wsSummary, 'Ringkasan');
        XLSX.utils.book_append_sheet(wb, wsStudents, 'Data Siswa');
        XLSX.utils.book_append_sheet(wb, wsPayments, 'Pembayaran');
        XLSX.utils.book_append_sheet(wb, wsExpenses, 'Pengeluaran');

        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
        const blob = new Blob([excelBuffer], {
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        });
        saveAs(
            blob,
            `Laporan-Kas-Kelas-${new Date().toISOString().split('T')[0]}.xlsx`
        );
    };

    // Calculate totals
    const getTotalPaid = (studentId) => {
        return payments
            .filter((p) => {
                const pStudentId = p.studentId?._id || p.studentId;
                return pStudentId === studentId;
            })
            .reduce((sum, p) => sum + p.amount, 0);
    };

    const getTunggakan = (studentId) => {
        const totalPaid = getTotalPaid(studentId);
        const shouldPay = currentWeek * 2000;
        return shouldPay - totalPaid;
    };

    const isLate = (studentId) => {
        const tunggakan = getTunggakan(studentId);
        return tunggakan >= 8000;
    };

    const totalKasMasuk = payments.reduce((sum, p) => sum + p.amount, 0);
    const totalKasKeluar = expenses.reduce((sum, e) => sum + e.amount, 0);
    const saldoKas = totalKasMasuk - totalKasKeluar;
    const studentsWithTunggakan = students.filter(
        (s) => getTunggakan(s._id) > 0
    ).length;

    const formatRp = (amount) => {
        return new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR',
            minimumFractionDigits: 0,
        }).format(amount);
    };

    if (loading && students.length === 0) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
                <div className="text-center">
                    <RefreshCw className="w-12 h-12 text-indigo-600 animate-spin mx-auto mb-4" />
                    <p className="text-gray-600">Memuat data...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
            <div className="max-w-7xl mx-auto p-4 md:p-6">
                {/* Header */}
                <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                            <div className="bg-indigo-600 p-3 rounded-lg">
                                <Wallet className="w-8 h-8 text-white" />
                            </div>
                            <div>
                                <h1 className="text-3xl font-bold text-gray-800">
                                    Kas Kelas
                                </h1>
                                <p className="text-gray-500">
                                    Sistem Pencatatan Kas TRIFORCE Rp
                                    2.000/minggu
                                </p>
                            </div>
                        </div>
                        <div className="flex items-center gap-3">
                            <div className="text-right">
                                <p className="text-sm text-gray-500">
                                    Minggu ke-
                                </p>
                                <p className="text-2xl font-bold text-indigo-600">
                                    {currentWeek}
                                </p>
                            </div>
                            <button
                                onClick={loadAllData}
                                className="p-2 hover:bg-gray-100 rounded-lg transition"
                                title="Refresh data"
                            >
                                <RefreshCw
                                    className={`w-5 h-5 text-gray-600 ${
                                        loading ? 'animate-spin' : ''
                                    }`}
                                />
                            </button>
                        </div>
                    </div>
                </div>

                {/* Error Alert */}
                {error && (
                    <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded mb-6">
                        <div className="flex items-center">
                            <AlertCircle className="w-5 h-5 text-red-400 mr-2" />
                            <p className="text-red-800">{error}</p>
                        </div>
                    </div>
                )}

                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div className="bg-white rounded-lg shadow p-5">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-gray-500">
                                    Total Siswa
                                </p>
                                <p className="text-2xl font-bold text-gray-800">
                                    {students.length}
                                </p>
                            </div>
                            <Users className="w-10 h-10 text-blue-500" />
                        </div>
                    </div>
                    <div className="bg-white rounded-lg shadow p-5">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-gray-500">
                                    Kas Masuk
                                </p>
                                <p className="text-xl font-bold text-green-600">
                                    {formatRp(totalKasMasuk)}
                                </p>
                            </div>
                            <TrendingUp className="w-10 h-10 text-green-500" />
                        </div>
                    </div>
                    <div className="bg-white rounded-lg shadow p-5">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-gray-500">
                                    Kas Keluar
                                </p>
                                <p className="text-xl font-bold text-red-600">
                                    {formatRp(totalKasKeluar)}
                                </p>
                            </div>
                            <TrendingDown className="w-10 h-10 text-red-500" />
                        </div>
                    </div>
                    <div className="bg-white rounded-lg shadow p-5">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-gray-500">
                                    Saldo Kas
                                </p>
                                <p className="text-xl font-bold text-indigo-600">
                                    {formatRp(saldoKas)}
                                </p>
                            </div>
                            <Wallet className="w-10 h-10 text-indigo-500" />
                        </div>
                    </div>
                </div>

                {/* Export Complete Report Button */}
                <div className="mb-6">
                    <button
                        onClick={exportCompleteReport}
                        className="w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white px-6 py-4 rounded-lg hover:from-green-700 hover:to-emerald-700 transition flex items-center justify-center gap-3 shadow-lg"
                    >
                        <FileText className="w-5 h-5" />
                        <span className="font-semibold">
                            Export Laporan Lengkap (Excel)
                        </span>
                        <span className="text-xs bg-white/20 px-2 py-1 rounded">
                            Semua Data
                        </span>
                    </button>
                </div>

                {/* Custom Payment Button */}
                <div className="mb-6">
                    <CustomPayment onPaymentAdded={loadAllData} />
                </div>

                {/* Tabs */}
                <div className="bg-white rounded-lg shadow mb-6">
                    <div className="flex border-b overflow-x-auto">
                        {[
                            'dashboard',
                            'siswa',
                            'pembayaran',
                            'pengeluaran',
                            'tunggakan',
                            'event',
                            'notifikasi',
                            'pengaturan',
                        ].map((tab) => (
                            <button
                                key={tab}
                                onClick={() => setActiveTab(tab)}
                                className={
                                    'px-6 py-3 font-medium capitalize whitespace-nowrap flex items-center gap-2 ' +
                                    (activeTab === tab
                                        ? 'border-b-2 border-indigo-600 text-indigo-600'
                                        : 'text-gray-500 hover:text-gray-700')
                                }
                            >
                                {tab === 'notifikasi' && (
                                    <Bell className="w-4 h-4" />
                                )}
                                {tab}
                            </button>
                        ))}
                    </div>
                </div>

                {/* Search & Filter Bar */}
                {(activeTab === 'siswa' ||
                    activeTab === 'pembayaran' ||
                    activeTab === 'pengeluaran' ||
                    activeTab === 'tunggakan') && (
                    <div className="bg-white rounded-lg shadow p-4 mb-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            {/* Search Bar */}
                            <div className="relative">
                                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                                <input
                                    type="text"
                                    placeholder="Cari nama atau absen..."
                                    value={searchQuery}
                                    onChange={(e) =>
                                        setSearchQuery(e.target.value)
                                    }
                                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                />
                            </div>

                            {/* Filter by Status (for siswa) */}
                            {activeTab === 'siswa' && (
                                <select
                                    value={filterStatus}
                                    onChange={(e) =>
                                        setFilterStatus(e.target.value)
                                    }
                                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                >
                                    <option value="Semua">Semua Status</option>
                                    <option value="Aktif">Aktif</option>
                                    <option value="Tidak Aktif">
                                        Tidak Aktif
                                    </option>
                                    <option value="Alumni">Alumni</option>
                                </select>
                            )}

                            {/* Filter by Method (for pembayaran) */}
                            {activeTab === 'pembayaran' && (
                                <select
                                    value={filterMethod}
                                    onChange={(e) =>
                                        setFilterMethod(e.target.value)
                                    }
                                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                >
                                    <option value="Semua">Semua Metode</option>
                                    <option value="Tunai">Tunai</option>
                                    <option value="Transfer">Transfer</option>
                                </select>
                            )}

                            {/* Filter by Category (for pengeluaran) */}
                            {activeTab === 'pengeluaran' && (
                                <select
                                    value={filterCategory}
                                    onChange={(e) =>
                                        setFilterCategory(e.target.value)
                                    }
                                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                >
                                    <option value="Semua">
                                        Semua Kategori
                                    </option>
                                    <option value="Kebersihan">
                                        Kebersihan
                                    </option>
                                    <option value="Acara">Acara</option>
                                    <option value="Perlengkapan">
                                        Perlengkapan
                                    </option>
                                    <option value="Lain-lain">Lain-lain</option>
                                </select>
                            )}

                            {/* Date From */}
                            {(activeTab === 'pembayaran' ||
                                activeTab === 'pengeluaran') && (
                                <input
                                    type="date"
                                    value={dateFrom}
                                    onChange={(e) =>
                                        setDateFrom(e.target.value)
                                    }
                                    placeholder="Dari tanggal"
                                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                />
                            )}

                            {/* Date To */}
                            {(activeTab === 'pembayaran' ||
                                activeTab === 'pengeluaran') && (
                                <input
                                    type="date"
                                    value={dateTo}
                                    onChange={(e) => setDateTo(e.target.value)}
                                    placeholder="Sampai tanggal"
                                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                />
                            )}

                            {/* Reset Filters Button */}
                            <button
                                onClick={() => {
                                    setSearchQuery('');
                                    setFilterStatus('Semua');
                                    setFilterMethod('Semua');
                                    setFilterCategory('Semua');
                                    setDateFrom('');
                                    setDateTo('');
                                }}
                                className="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition flex items-center justify-center gap-2"
                            >
                                <RefreshCw className="w-4 h-4" />
                                Reset Filter
                            </button>
                        </div>
                    </div>
                )}

                {/* Dashboard Tab */}
                {activeTab === 'dashboard' && (
                    <div className="space-y-6">
                        {studentsWithTunggakan > 0 && (
                            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded">
                                <div className="flex items-center">
                                    <AlertCircle className="w-5 h-5 text-yellow-400 mr-2" />
                                    <p className="text-yellow-800">
                                        <strong>{studentsWithTunggakan}</strong>{' '}
                                        siswa memiliki tunggakan
                                    </p>
                                </div>
                            </div>
                        )}

                        <div className="bg-white rounded-lg shadow overflow-hidden">
                            <div className="p-6 border-b">
                                <h2 className="text-xl font-bold text-gray-800">
                                    Status Pembayaran Siswa
                                </h2>
                            </div>
                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Absen
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Nama
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Total Bayar
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Tunggakan
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Status
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Aksi
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {students
                                            .sort((a, b) => a.absen - b.absen)
                                            .map((student) => {
                                                const tunggakan = getTunggakan(
                                                    student._id
                                                );
                                                const late = isLate(
                                                    student._id
                                                );
                                                return (
                                                    <tr
                                                        key={student._id}
                                                        className={
                                                            late
                                                                ? 'bg-red-50'
                                                                : ''
                                                        }
                                                    >
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {student.absen}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                            {student.name}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {formatRp(
                                                                getTotalPaid(
                                                                    student._id
                                                                )
                                                            )}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                            <span
                                                                className={
                                                                    tunggakan >
                                                                    0
                                                                        ? 'text-red-600 font-semibold'
                                                                        : 'text-green-600'
                                                                }
                                                            >
                                                                {formatRp(
                                                                    tunggakan
                                                                )}
                                                            </span>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            {late ? (
                                                                <span className="px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800 flex items-center gap-1 w-fit">
                                                                    <AlertCircle className="w-3 h-3" />{' '}
                                                                    Telat
                                                                </span>
                                                            ) : tunggakan ===
                                                              0 ? (
                                                                <span className="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800 flex items-center gap-1 w-fit">
                                                                    <CheckCircle className="w-3 h-3" />{' '}
                                                                    Lunas
                                                                </span>
                                                            ) : (
                                                                <span className="px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                                                    Aktif
                                                                </span>
                                                            )}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                            <button
                                                                onClick={() =>
                                                                    addPaymentQuick(
                                                                        student._id
                                                                    )
                                                                }
                                                                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition text-sm font-medium"
                                                            >
                                                                Bayar Kas
                                                            </button>
                                                        </td>
                                                    </tr>
                                                );
                                            })}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                )}

                {/* Siswa Tab */}
                {activeTab === 'siswa' && (
                    <div className="bg-white rounded-lg shadow">
                        <div className="p-6 border-b flex justify-between items-center">
                            <h2 className="text-xl font-bold text-gray-800">
                                Data Siswa
                            </h2>
                            <div className="flex gap-2">
                                <button
                                    onClick={exportStudentsToExcel}
                                    className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition flex items-center gap-2"
                                >
                                    <Download className="w-4 h-4" /> Export
                                    Excel
                                </button>
                                <button
                                    onClick={() => setShowAddStudent(true)}
                                    className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition flex items-center gap-2"
                                >
                                    <Plus className="w-4 h-4" /> Tambah Siswa
                                </button>
                            </div>
                        </div>
                        <div className="overflow-x-auto">
                            <table className="w-full">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Absen
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Nama
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            WhatsApp
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Status
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Notifikasi
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Aksi
                                        </th>
                                    </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200">
                                    {filteredStudents.length === 0 ? (
                                        <tr>
                                            <td
                                                colSpan="6"
                                                className="px-6 py-8 text-center text-gray-500"
                                            >
                                                Tidak ada data siswa yang sesuai
                                            </td>
                                        </tr>
                                    ) : (
                                        filteredStudents
                                            .sort((a, b) => a.absen - b.absen)
                                            .map((student) => (
                                                <tr key={student._id}>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                        {student.absen}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                        {student.name}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                                        {student.phoneNumber ? (
                                                            <span className="flex items-center gap-1">
                                                                📱{' '}
                                                                {
                                                                    student.phoneNumber
                                                                }
                                                            </span>
                                                        ) : (
                                                            <span className="text-gray-400 italic">
                                                                Belum diset
                                                            </span>
                                                        )}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap">
                                                        <span
                                                            className={`px-2 py-1 text-xs font-semibold rounded-full ${
                                                                student.status ===
                                                                'Aktif'
                                                                    ? 'bg-green-100 text-green-800'
                                                                    : student.status ===
                                                                      'Alumni'
                                                                    ? 'bg-blue-100 text-blue-800'
                                                                    : 'bg-gray-100 text-gray-800'
                                                            }`}
                                                        >
                                                            {student.status}
                                                        </span>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap">
                                                        {student.enableNotification !==
                                                        false ? (
                                                            <span className="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                                                                ✓ Aktif
                                                            </span>
                                                        ) : (
                                                            <span className="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
                                                                ✗ Non-aktif
                                                            </span>
                                                        )}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                        <div className="flex gap-2">
                                                            <button
                                                                onClick={() =>
                                                                    openEditStudent(
                                                                        student
                                                                    )
                                                                }
                                                                className="text-blue-600 hover:text-blue-800 font-medium"
                                                            >
                                                                Edit
                                                            </button>
                                                            <button
                                                                onClick={() =>
                                                                    deleteStudent(
                                                                        student._id
                                                                    )
                                                                }
                                                                className="text-red-600 hover:text-red-800"
                                                            >
                                                                <Trash2 className="w-4 h-4" />
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))
                                    )}
                                </tbody>
                            </table>
                        </div>
                    </div>
                )}

                {/* Pembayaran Tab */}
                {activeTab === 'pembayaran' && (
                    <div className="bg-white rounded-lg shadow">
                        <div className="p-6 border-b flex justify-between items-center">
                            <div>
                                <h2 className="text-xl font-bold text-gray-800">
                                    Riwayat Pembayaran
                                </h2>
                                <p className="text-sm text-gray-500 mt-1">
                                    Total: {filteredPayments.length} pembayaran
                                </p>
                            </div>
                            <div className="flex gap-2">
                                <button
                                    onClick={exportPaymentsToExcel}
                                    className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition flex items-center gap-2"
                                >
                                    <Download className="w-4 h-4" /> Export
                                    Excel
                                </button>
                                <button
                                    onClick={() => setShowPayment(true)}
                                    className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition flex items-center gap-2"
                                >
                                    <Plus className="w-4 h-4" /> Tambah
                                    Pembayaran
                                </button>
                            </div>
                        </div>
                        <div className="overflow-x-auto">
                            <table className="w-full">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Tanggal
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Nama/Sumber
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Jumlah
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Metode
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Tipe
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Catatan
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Aksi
                                        </th>
                                    </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200">
                                    {filteredPayments.map((payment) => {
                                        const studentId =
                                            payment.studentId?._id ||
                                            payment.studentId;
                                        const student = students.find(
                                            (s) => s._id === studentId
                                        );

                                        return (
                                            <tr key={payment._id}>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {new Date(
                                                        payment.date
                                                    ).toLocaleDateString(
                                                        'id-ID'
                                                    )}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                    {payment.source ===
                                                        'custom' ||
                                                    payment.source === 'event'
                                                        ? payment.sourceName
                                                        : student?.name ||
                                                          'Siswa tidak ditemukan'}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {formatRp(payment.amount)}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    <span
                                                        className={`px-2 py-1 text-xs font-semibold rounded-full ${
                                                            payment.method ===
                                                            'Tunai'
                                                                ? 'bg-green-100 text-green-800'
                                                                : 'bg-blue-100 text-blue-800'
                                                        }`}
                                                    >
                                                        {payment.method}
                                                    </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                    {payment.source ===
                                                        'custom' && (
                                                        <span className="px-2 py-1 text-xs font-semibold rounded-full bg-emerald-100 text-emerald-800">
                                                            Custom
                                                        </span>
                                                    )}
                                                    {payment.source ===
                                                        'event' && (
                                                        <span className="px-2 py-1 text-xs font-semibold rounded-full bg-purple-100 text-purple-800">
                                                            Event
                                                        </span>
                                                    )}
                                                    {payment.source ===
                                                        'regular' && (
                                                        <span className="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
                                                            Kas Reguler
                                                        </span>
                                                    )}
                                                </td>
                                                <td className="px-6 py-4 text-sm text-gray-500">
                                                    {payment.note || '-'}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                    <button
                                                        onClick={() =>
                                                            deletePayment(
                                                                payment._id
                                                            )
                                                        }
                                                        className="text-red-600 hover:text-red-800"
                                                    >
                                                        <Trash2 className="w-4 h-4" />
                                                    </button>
                                                </td>
                                            </tr>
                                        );
                                    })}
                                </tbody>
                            </table>
                        </div>
                    </div>
                )}

                {/* Pengeluaran Tab */}
                {activeTab === 'pengeluaran' && (
                    <div className="bg-white rounded-lg shadow">
                        <div className="p-6 border-b flex justify-between items-center">
                            <h2 className="text-xl font-bold text-gray-800">
                                Riwayat Pengeluaran
                            </h2>
                            <div className="flex gap-2">
                                <button
                                    onClick={exportExpensesToExcel}
                                    className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition flex items-center gap-2"
                                >
                                    <Download className="w-4 h-4" /> Export
                                    Excel
                                </button>
                                <button
                                    onClick={() => setShowExpense(true)}
                                    className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition flex items-center gap-2"
                                >
                                    <Plus className="w-4 h-4" /> Tambah
                                    Pengeluaran
                                </button>
                            </div>
                        </div>
                        <div className="overflow-x-auto">
                            <table className="w-full">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Tanggal
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Keperluan
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Jumlah
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Kategori
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Disetujui
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Aksi
                                        </th>
                                    </tr>
                                </thead>
                                <tbody className="divide-y divide-gray-200">
                                    {filteredExpenses.length === 0 ? (
                                        <tr>
                                            <td
                                                colSpan="6"
                                                className="px-6 py-8 text-center text-gray-500"
                                            >
                                                Tidak ada data pengeluaran yang
                                                sesuai
                                            </td>
                                        </tr>
                                    ) : (
                                        filteredExpenses.map((expense) => (
                                            <tr key={expense._id}>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {new Date(
                                                        expense.date
                                                    ).toLocaleDateString(
                                                        'id-ID'
                                                    )}
                                                </td>
                                                <td className="px-6 py-4 text-sm font-medium text-gray-900">
                                                    {expense.purpose}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                    {formatRp(expense.amount)}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                    <span
                                                        className={`px-2 py-1 text-xs font-semibold rounded-full ${
                                                            expense.category ===
                                                            'Kebersihan'
                                                                ? 'bg-green-100 text-green-800'
                                                                : expense.category ===
                                                                  'Acara'
                                                                ? 'bg-purple-100 text-purple-800'
                                                                : expense.category ===
                                                                  'Perlengkapan'
                                                                ? 'bg-blue-100 text-blue-800'
                                                                : 'bg-gray-100 text-gray-800'
                                                        }`}
                                                    >
                                                        {expense.category}
                                                    </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    {expense.approvedBy}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                    <button
                                                        onClick={() =>
                                                            deleteExpense(
                                                                expense._id
                                                            )
                                                        }
                                                        className="text-red-600 hover:text-red-800"
                                                    >
                                                        <Trash2 className="w-4 h-4" />
                                                    </button>
                                                </td>
                                            </tr>
                                        ))
                                    )}
                                </tbody>
                            </table>
                        </div>
                    </div>
                )}

                {/* Tunggakan Tab - NEW FEATURE */}
                {activeTab === 'tunggakan' && (
                    <div className="bg-white rounded-lg shadow">
                        <div className="p-6 border-b">
                            <div className="flex items-center justify-between">
                                <div>
                                    <h2 className="text-xl font-bold text-gray-800">
                                        Daftar Tunggakan
                                    </h2>
                                    <p className="text-sm text-gray-500 mt-1">
                                        Siswa yang belum bayar minggu ke-{' '}
                                        {currentWeek}
                                    </p>
                                </div>
                                <div className="text-right">
                                    <p className="text-sm text-gray-500">
                                        Total Tunggakan
                                    </p>
                                    <p className="text-2xl font-bold text-red-600">
                                        {getUnpaidStudents().length} Siswa
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div className="overflow-x-auto">
                            {getUnpaidStudents().length === 0 ? (
                                <div className="p-12 text-center">
                                    <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                                    <h3 className="text-xl font-semibold text-gray-800 mb-2">
                                        Semua Sudah Bayar! 🎉
                                    </h3>
                                    <p className="text-gray-500">
                                        Tidak ada siswa yang memiliki tunggakan
                                        minggu ini
                                    </p>
                                </div>
                            ) : (
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Absen
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Nama
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Status
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Tunggakan
                                            </th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                                Aksi
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {getUnpaidStudents()
                                            .sort((a, b) => a.absen - b.absen)
                                            .map((student) => {
                                                const unpaidWeeks =
                                                    currentWeek -
                                                    payments
                                                        .filter(
                                                            (p) =>
                                                                p.studentId ===
                                                                student._id
                                                        )
                                                        .filter(
                                                            (p) =>
                                                                p.week <=
                                                                currentWeek
                                                        ).length;
                                                return (
                                                    <tr key={student._id}>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {student.absen}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                            {student.name}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <span className="px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                                                                Belum Bayar
                                                            </span>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-red-600 font-semibold">
                                                            {formatRp(
                                                                unpaidWeeks *
                                                                    2000
                                                            )}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                            <button
                                                                onClick={() =>
                                                                    addPaymentQuick(
                                                                        student._id
                                                                    )
                                                                }
                                                                className="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700 transition text-xs"
                                                            >
                                                                Bayar Sekarang
                                                            </button>
                                                        </td>
                                                    </tr>
                                                );
                                            })}
                                    </tbody>
                                </table>
                            )}
                        </div>
                    </div>
                )}

                {/* Event Tab */}
                {activeTab === 'event' && <EventManagement />}

                {/* Notifikasi Tab - WhatsApp Bot */}
                {activeTab === 'notifikasi' && <NotificationManager />}

                {/* Settings Tab - NEW FEATURE */}
                {activeTab === 'pengaturan' && (
                    <Settings
                        onStartDateChange={handleStartDateChange}
                        currentStartDate={startDate}
                    />
                )}

                {/* Modal Add Student */}
                {showAddStudent && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                        <div className="bg-white rounded-lg max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">
                            <h3 className="text-xl font-bold mb-4">
                                Tambah Siswa Baru
                            </h3>
                            <form onSubmit={addStudent} className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Nomor Absen
                                    </label>
                                    <input
                                        type="number"
                                        name="absen"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Nama Lengkap
                                    </label>
                                    <input
                                        type="text"
                                        name="name"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Nomor WhatsApp (Opsional)
                                    </label>
                                    <input
                                        type="text"
                                        name="phoneNumber"
                                        placeholder="08xxxxxxxxxx atau 628xxxxxxxxxx"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                    <p className="text-xs text-gray-500 mt-1">
                                        Format: 08xxx atau 628xxx (tanpa
                                        spasi/strip)
                                    </p>
                                </div>
                                <div className="flex items-center gap-2">
                                    <input
                                        type="checkbox"
                                        name="enableNotification"
                                        id="enableNotification"
                                        defaultChecked
                                        className="w-4 h-4 text-indigo-600 rounded"
                                    />
                                    <label
                                        htmlFor="enableNotification"
                                        className="text-sm text-gray-700"
                                    >
                                        Aktifkan notifikasi WhatsApp
                                    </label>
                                </div>
                                <div className="flex gap-3">
                                    <button
                                        type="button"
                                        onClick={() => setShowAddStudent(false)}
                                        className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
                                    >
                                        Batal
                                    </button>
                                    <button
                                        type="submit"
                                        className="flex-1 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition"
                                    >
                                        Simpan
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}

                {/* Modal Edit Student */}
                {showEditStudent && editingStudent && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                        <div className="bg-white rounded-lg max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">
                            <h3 className="text-xl font-bold mb-4">
                                Edit Data Siswa
                            </h3>
                            <form
                                onSubmit={updateStudent}
                                className="space-y-4"
                            >
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Nomor Absen
                                    </label>
                                    <input
                                        type="number"
                                        name="absen"
                                        defaultValue={editingStudent.absen}
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Nama Lengkap
                                    </label>
                                    <input
                                        type="text"
                                        name="name"
                                        defaultValue={editingStudent.name}
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Nomor WhatsApp
                                    </label>
                                    <input
                                        type="text"
                                        name="phoneNumber"
                                        defaultValue={
                                            editingStudent.phoneNumber || ''
                                        }
                                        placeholder="08xxxxxxxxxx atau 628xxxxxxxxxx"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                    <p className="text-xs text-gray-500 mt-1">
                                        Format: 08xxx atau 628xxx (tanpa
                                        spasi/strip)
                                    </p>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Status
                                    </label>
                                    <select
                                        name="status"
                                        defaultValue={editingStudent.status}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    >
                                        <option value="Aktif">Aktif</option>
                                        <option value="Tidak Aktif">
                                            Tidak Aktif
                                        </option>
                                        <option value="Alumni">Alumni</option>
                                    </select>
                                </div>
                                <div className="flex items-center gap-2">
                                    <input
                                        type="checkbox"
                                        name="enableNotification"
                                        id="enableNotificationEdit"
                                        defaultChecked={
                                            editingStudent.enableNotification !==
                                            false
                                        }
                                        className="w-4 h-4 text-indigo-600 rounded"
                                    />
                                    <label
                                        htmlFor="enableNotificationEdit"
                                        className="text-sm text-gray-700"
                                    >
                                        Aktifkan notifikasi WhatsApp
                                    </label>
                                </div>
                                <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                                    <p className="text-xs text-blue-800">
                                        💡 <strong>Tips:</strong> Pastikan nomor
                                        WhatsApp valid agar siswa bisa menerima
                                        reminder pembayaran kas.
                                    </p>
                                </div>
                                <div className="flex gap-3">
                                    <button
                                        type="button"
                                        onClick={() => {
                                            setShowEditStudent(false);
                                            setEditingStudent(null);
                                        }}
                                        className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
                                    >
                                        Batal
                                    </button>
                                    <button
                                        type="submit"
                                        className="flex-1 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition"
                                    >
                                        Update
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}

                {/* Modal Add Payment */}
                {showPayment && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                        <div className="bg-white rounded-lg max-w-md w-full p-6">
                            <h3 className="text-xl font-bold mb-4">
                                Tambah Pembayaran
                            </h3>
                            <form onSubmit={addPayment} className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Siswa
                                    </label>
                                    <select
                                        name="student"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    >
                                        <option value="">Pilih Siswa</option>
                                        {students
                                            .sort((a, b) => a.absen - b.absen)
                                            .map((student) => (
                                                <option
                                                    key={student._id}
                                                    value={student._id}
                                                >
                                                    {student.absen} -{' '}
                                                    {student.name}
                                                </option>
                                            ))}
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Jumlah
                                    </label>
                                    <input
                                        type="number"
                                        name="amount"
                                        defaultValue="2000"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Tanggal
                                    </label>
                                    <input
                                        type="date"
                                        name="date"
                                        defaultValue={
                                            new Date()
                                                .toISOString()
                                                .split('T')[0]
                                        }
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Metode
                                    </label>
                                    <select
                                        name="method"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    >
                                        <option>Tunai</option>
                                        <option>Transfer</option>
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Catatan (opsional)
                                    </label>
                                    <input
                                        type="text"
                                        name="note"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div className="flex gap-3">
                                    <button
                                        type="button"
                                        onClick={() => setShowPayment(false)}
                                        className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
                                    >
                                        Batal
                                    </button>
                                    <button
                                        type="submit"
                                        className="flex-1 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition"
                                    >
                                        Simpan
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}

                {/* Modal Add Expense */}
                {showExpense && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                        <div className="bg-white rounded-lg max-w-md w-full p-6">
                            <h3 className="text-xl font-bold mb-4">
                                Tambah Pengeluaran
                            </h3>
                            <form onSubmit={addExpense} className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Keperluan
                                    </label>
                                    <input
                                        type="text"
                                        name="purpose"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Jumlah
                                    </label>
                                    <input
                                        type="number"
                                        name="amount"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Tanggal
                                    </label>
                                    <input
                                        type="date"
                                        name="date"
                                        defaultValue={
                                            new Date()
                                                .toISOString()
                                                .split('T')[0]
                                        }
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Kategori
                                    </label>
                                    <select
                                        name="category"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    >
                                        <option>Kebersihan</option>
                                        <option>Acara</option>
                                        <option>Perlengkapan</option>
                                        <option>Lain-lain</option>
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Disetujui Oleh
                                    </label>
                                    <input
                                        type="text"
                                        name="approvedBy"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    />
                                </div>
                                <div className="flex gap-3">
                                    <button
                                        type="button"
                                        onClick={() => setShowExpense(false)}
                                        className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
                                    >
                                        Batal
                                    </button>
                                    <button
                                        type="submit"
                                        className="flex-1 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition"
                                    >
                                        Simpan
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;


components/CustomPayment.jsx
import React, { useState } from 'react';
import { DollarSign, Plus, X, Gift, TrendingUp } from 'lucide-react';
import { paymentsAPI } from '../services/api';

const CustomPayment = ({ onPaymentAdded }) => {
    const [showModal, setShowModal] = useState(false);
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        setLoading(true);
        try {
            const customPayment = {
                studentId: null, // Tidak ada studentId untuk custom payment
                amount: parseInt(formData.get('amount')),
                date: formData.get('date'),
                method: formData.get('method'),
                note: formData.get('note'),
                source: 'custom',
                sourceName: formData.get('sourceName'),
            };

            await paymentsAPI.create(customPayment);

            if (onPaymentAdded) {
                onPaymentAdded();
            }

            setShowModal(false);
            e.target.reset();

            alert(
                `✅ Pemasukan custom berhasil ditambahkan: ${formatRp(
                    customPayment.amount
                )}`
            );
        } catch (err) {
            alert(
                '❌ Gagal menambah pemasukan: ' + err.response?.data?.message
            );
        } finally {
            setLoading(false);
        }
    };

    const formatRp = (amount) => {
        return new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR',
            minimumFractionDigits: 0,
        }).format(amount);
    };

    const sourceExamples = [
        'Sumbangan Dosen',
        'Donasi Alumni',
        'Sponsor Kegiatan',
        'Penjualan Merchandise',
        'Hasil Fundraising',
        'Hibah',
        'Lain-lain',
    ];

    return (
        <>
            {/* Trigger Button */}
            <button
                onClick={() => setShowModal(true)}
                className="w-full bg-gradient-to-r from-emerald-600 to-green-600 text-white px-6 py-4 rounded-lg hover:from-emerald-700 hover:to-green-700 transition flex items-center justify-center gap-3 shadow-lg"
            >
                <Gift className="w-5 h-5" />
                <span className="font-semibold">Tambah Pemasukan Custom</span>
                <span className="text-xs bg-white/20 px-2 py-1 rounded">
                    Sumbangan, Donasi, dll
                </span>
            </button>

            {/* Modal */}
            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg max-w-md w-full">
                        {/* Header */}
                        <div className="p-6 border-b">
                            <div className="flex items-start justify-between">
                                <div className="flex items-center gap-3">
                                    <div className="bg-emerald-600 p-2 rounded-lg">
                                        <Gift className="w-5 h-5 text-white" />
                                    </div>
                                    <div>
                                        <h3 className="text-xl font-bold text-gray-800">
                                            Pemasukan Custom
                                        </h3>
                                        <p className="text-sm text-gray-500">
                                            Sumber pemasukan lain untuk kas
                                            kelas
                                        </p>
                                    </div>
                                </div>
                                <button
                                    onClick={() => setShowModal(false)}
                                    className="p-1 hover:bg-gray-100 rounded"
                                >
                                    <X className="w-5 h-5" />
                                </button>
                            </div>
                        </div>

                        {/* Body */}
                        <form onSubmit={handleSubmit} className="p-6 space-y-4">
                            {/* Source Name */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Sumber Pemasukan{' '}
                                    <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="text"
                                    name="sourceName"
                                    required
                                    placeholder="Contoh: Sumbangan Dosen Wali"
                                    list="sourceExamples"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
                                />
                                <datalist id="sourceExamples">
                                    {sourceExamples.map((example, idx) => (
                                        <option key={idx} value={example} />
                                    ))}
                                </datalist>
                                <p className="text-xs text-gray-500 mt-1">
                                    Nama/deskripsi sumber pemasukan
                                </p>
                            </div>

                            {/* Amount */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Jumlah{' '}
                                    <span className="text-red-500">*</span>
                                </label>
                                <div className="relative">
                                    <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                                        Rp
                                    </span>
                                    <input
                                        type="number"
                                        name="amount"
                                        required
                                        min="1000"
                                        step="500"
                                        placeholder="50000"
                                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
                                    />
                                </div>
                                <p className="text-xs text-gray-500 mt-1">
                                    Jumlah uang yang masuk ke kas
                                </p>
                            </div>

                            {/* Date */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Tanggal{' '}
                                    <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="date"
                                    name="date"
                                    required
                                    defaultValue={
                                        new Date().toISOString().split('T')[0]
                                    }
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
                                />
                            </div>

                            {/* Method */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Metode Pembayaran{' '}
                                    <span className="text-red-500">*</span>
                                </label>
                                <select
                                    name="method"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
                                >
                                    <option value="Tunai">Tunai</option>
                                    <option value="Transfer">Transfer</option>
                                </select>
                            </div>

                            {/* Note */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Catatan (Opsional)
                                </label>
                                <textarea
                                    name="note"
                                    rows="3"
                                    placeholder="Keterangan tambahan..."
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
                                />
                            </div>

                            {/* Info Box */}
                            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                                <p className="text-xs text-blue-800">
                                    <strong>ℹ️ Catatan:</strong> Pemasukan ini
                                    akan langsung masuk ke kas kelas dan
                                    ditampilkan di tab Pembayaran dengan label
                                    sumber yang Anda tentukan.
                                </p>
                            </div>

                            {/* Buttons */}
                            <div className="flex gap-3 pt-2">
                                <button
                                    type="button"
                                    onClick={() => setShowModal(false)}
                                    disabled={loading}
                                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition disabled:opacity-50"
                                >
                                    Batal
                                </button>
                                <button
                                    type="submit"
                                    disabled={loading}
                                    className="flex-1 px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition flex items-center justify-center gap-2 disabled:opacity-50"
                                >
                                    {loading ? (
                                        <>
                                            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                            Menyimpan...
                                        </>
                                    ) : (
                                        <>
                                            <Plus className="w-4 h-4" />
                                            Tambah Pemasukan
                                        </>
                                    )}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </>
    );
};

export default CustomPayment;


 
components/EventManagement.jsx
import React, { useState, useEffect } from 'react';
import {
    Calendar,
    DollarSign,
    Users,
    Target,
    Plus,
    Trash2,
    CheckCircle,
    AlertCircle,
    TrendingUp,
    X,
} from 'lucide-react';
import { eventsAPI, eventPaymentsAPI, studentsAPI } from '../services/api';

const EventManagement = () => {
    const [events, setEvents] = useState([]);
    const [students, setStudents] = useState([]);
    const [activeEvent, setActiveEvent] = useState(null);
    const [eventPayments, setEventPayments] = useState([]);
    const [showCreateEvent, setShowCreateEvent] = useState(false);
    const [showPaymentModal, setShowPaymentModal] = useState(false);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    useEffect(() => {
        loadData();
    }, []);

    const loadData = async () => {
        setLoading(true);
        try {
            const [eventsRes, studentsRes] = await Promise.all([
                eventsAPI.getAll(),
                studentsAPI.getAll(),
            ]);
            setEvents(eventsRes.data);
            setStudents(studentsRes.data);
        } catch (err) {
            setError('Gagal memuat data');
        } finally {
            setLoading(false);
        }
    };

    const loadEventPayments = async (eventId) => {
        try {
            const response = await eventPaymentsAPI.getByEvent(eventId);
            setEventPayments(response.data);
        } catch (err) {
            console.error('Error loading payments:', err);
        }
    };

    const handleCreateEvent = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        const targetAmount = parseInt(formData.get('targetAmount'));
        const totalStudents = students.length;
        const calculatedPerStudent =
            totalStudents > 0 ? Math.ceil(targetAmount / totalStudents) : 0;

        try {
            const newEvent = {
                name: formData.get('name'),
                description: formData.get('description'),
                targetAmount: targetAmount,
                perStudentAmount:
                    parseInt(formData.get('perStudentAmount')) ||
                    calculatedPerStudent,
                startDate: formData.get('startDate'),
                endDate: formData.get('endDate'),
            };

            const response = await eventsAPI.create(newEvent);
            setEvents([response.data, ...events]);
            setShowCreateEvent(false);
            e.target.reset();
            alert('Event berhasil dibuat!');
        } catch (err) {
            console.error('Error creating event:', err);
            alert(
                'Gagal membuat event: ' +
                    (err.response?.data?.message || err.message)
            );
        }
    };

    const handleAddPayment = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        try {
            const payment = {
                studentId: formData.get('studentId'),
                amount: parseInt(formData.get('amount')),
                date: formData.get('date'),
                method: formData.get('method'),
                note: formData.get('note'),
            };

            await eventPaymentsAPI.create(activeEvent._id, payment);
            await loadData();
            await loadEventPayments(activeEvent._id);

            // Update active event
            const updatedEvent = events.find((e) => e._id === activeEvent._id);
            setActiveEvent(updatedEvent);

            setShowPaymentModal(false);
            e.target.reset();
        } catch (err) {
            alert('Gagal menambah pembayaran: ' + err.response?.data?.message);
        }
    };

    const handleCompleteEvent = async (eventId) => {
        if (
            !window.confirm(
                'Selesaikan event ini? Surplus akan ditransfer ke kas.'
            )
        ) {
            return;
        }

        try {
            const response = await eventsAPI.complete(eventId);
            alert(
                `Event selesai! Surplus Rp ${response.data.surplus.toLocaleString(
                    'id-ID'
                )} ditransfer ke kas.`
            );
            await loadData();
            setActiveEvent(null);
        } catch (err) {
            alert('Gagal menyelesaikan event: ' + err.response?.data?.message);
        }
    };

    const handleDeleteEvent = async (eventId) => {
        if (
            !window.confirm(
                'Hapus event ini? Semua data pembayaran akan dihapus.'
            )
        ) {
            return;
        }

        try {
            await eventsAPI.delete(eventId);
            setEvents(events.filter((e) => e._id !== eventId));
            if (activeEvent?._id === eventId) {
                setActiveEvent(null);
            }
        } catch (err) {
            alert('Gagal menghapus event');
        }
    };

    const formatRp = (amount) => {
        return new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR',
            minimumFractionDigits: 0,
        }).format(amount);
    };

    const getEventProgress = (event) => {
        const percentage = (event.totalCollected / event.targetAmount) * 100;
        return Math.min(percentage, 100);
    };

    const getUnpaidStudents = (event) => {
        if (!event) return [];
        const paidIds = event.studentsPaid.map((s) => s._id || s);
        return students.filter((s) => !paidIds.includes(s._id));
    };

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <div className="bg-purple-600 p-3 rounded-lg">
                            <Calendar className="w-6 h-6 text-white" />
                        </div>
                        <div>
                            <h2 className="text-2xl font-bold text-gray-800">
                                Event Management
                            </h2>
                            <p className="text-gray-500">
                                Kelola iuran event & kegiatan kelas
                            </p>
                        </div>
                    </div>
                    <button
                        onClick={() => setShowCreateEvent(true)}
                        className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition flex items-center gap-2"
                    >
                        <Plus className="w-4 h-4" />
                        Buat Event Baru
                    </button>
                </div>
            </div>

            {/* Active Events */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {events
                    .filter((e) => e.status === 'aktif')
                    .map((event) => {
                        const progress = getEventProgress(event);
                        const unpaid = getUnpaidStudents(event);
                        const surplus =
                            event.totalCollected - event.targetAmount;

                        return (
                            <div
                                key={event._id}
                                className="bg-white rounded-lg shadow hover:shadow-lg transition cursor-pointer"
                                onClick={() => {
                                    setActiveEvent(event);
                                    loadEventPayments(event._id);
                                }}
                            >
                                <div className="p-4 border-b">
                                    <div className="flex items-start justify-between mb-2">
                                        <h3 className="font-bold text-lg text-gray-800">
                                            {event.name}
                                        </h3>
                                        <span className="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                                            Aktif
                                        </span>
                                    </div>
                                    <p className="text-sm text-gray-500">
                                        {event.description}
                                    </p>
                                </div>

                                <div className="p-4 space-y-3">
                                    {/* Progress Bar */}
                                    <div>
                                        <div className="flex justify-between text-sm mb-1">
                                            <span className="text-gray-600">
                                                Progress
                                            </span>
                                            <span className="font-semibold text-purple-600">
                                                {progress.toFixed(1)}%
                                            </span>
                                        </div>
                                        <div className="w-full bg-gray-200 rounded-full h-2">
                                            <div
                                                className="bg-purple-600 h-2 rounded-full transition-all"
                                                style={{
                                                    width: `${progress}%`,
                                                }}
                                            />
                                        </div>
                                    </div>

                                    {/* Stats */}
                                    <div className="grid grid-cols-2 gap-2 text-sm">
                                        <div>
                                            <p className="text-gray-500">
                                                Target
                                            </p>
                                            <p className="font-semibold">
                                                {formatRp(event.targetAmount)}
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-500">
                                                Terkumpul
                                            </p>
                                            <p className="font-semibold text-green-600">
                                                {formatRp(event.totalCollected)}
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-500">
                                                Per Siswa
                                            </p>
                                            <p className="font-semibold">
                                                {formatRp(
                                                    event.perStudentAmount
                                                )}
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-500">
                                                Sudah Bayar
                                            </p>
                                            <p className="font-semibold">
                                                {event.studentsPaid.length}{' '}
                                                siswa
                                            </p>
                                        </div>
                                    </div>

                                    {/* Surplus Info */}
                                    {surplus > 0 && (
                                        <div className="bg-green-50 border border-green-200 rounded p-2 text-sm">
                                            <p className="text-green-800 font-semibold">
                                                Surplus: {formatRp(surplus)}
                                            </p>
                                            <p className="text-xs text-green-600">
                                                Akan masuk ke kas saat event
                                                selesai
                                            </p>
                                        </div>
                                    )}

                                    {/* Unpaid Count */}
                                    {unpaid.length > 0 && (
                                        <div className="bg-yellow-50 border border-yellow-200 rounded p-2">
                                            <p className="text-xs text-yellow-800">
                                                <AlertCircle className="w-3 h-3 inline mr-1" />
                                                {unpaid.length} siswa belum
                                                bayar
                                            </p>
                                        </div>
                                    )}
                                </div>
                            </div>
                        );
                    })}
            </div>

            {/* Completed Events */}
            {events.filter((e) => e.status === 'selesai').length > 0 && (
                <div className="bg-white rounded-lg shadow">
                    <div className="p-4 border-b">
                        <h3 className="font-bold text-gray-800">
                            Event Selesai
                        </h3>
                    </div>
                    <div className="p-4 space-y-2">
                        {events
                            .filter((e) => e.status === 'selesai')
                            .map((event) => (
                                <div
                                    key={event._id}
                                    className="flex items-center justify-between p-3 bg-gray-50 rounded"
                                >
                                    <div>
                                        <p className="font-semibold text-gray-800">
                                            {event.name}
                                        </p>
                                        <p className="text-sm text-gray-500">
                                            Terkumpul:{' '}
                                            {formatRp(event.totalCollected)} •
                                            Surplus:{' '}
                                            {formatRp(
                                                event.totalCollected -
                                                    event.targetAmount
                                            )}
                                        </p>
                                    </div>
                                    <CheckCircle className="w-5 h-5 text-green-600" />
                                </div>
                            ))}
                    </div>
                </div>
            )}

            {/* Event Detail Modal */}
            {activeEvent && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                        {/* Modal Header */}
                        <div className="p-6 border-b sticky top-0 bg-white">
                            <div className="flex items-start justify-between">
                                <div>
                                    <h3 className="text-2xl font-bold text-gray-800">
                                        {activeEvent.name}
                                    </h3>
                                    <p className="text-gray-500 mt-1">
                                        {activeEvent.description}
                                    </p>
                                </div>
                                <button
                                    onClick={() => setActiveEvent(null)}
                                    className="p-2 hover:bg-gray-100 rounded"
                                >
                                    <X className="w-5 h-5" />
                                </button>
                            </div>

                            {/* Progress Summary */}
                            <div className="mt-4 grid grid-cols-4 gap-4">
                                <div className="bg-purple-50 p-3 rounded">
                                    <p className="text-xs text-purple-600 mb-1">
                                        Target
                                    </p>
                                    <p className="font-bold text-purple-900">
                                        {formatRp(activeEvent.targetAmount)}
                                    </p>
                                </div>
                                <div className="bg-green-50 p-3 rounded">
                                    <p className="text-xs text-green-600 mb-1">
                                        Terkumpul
                                    </p>
                                    <p className="font-bold text-green-900">
                                        {formatRp(activeEvent.totalCollected)}
                                    </p>
                                </div>
                                <div className="bg-blue-50 p-3 rounded">
                                    <p className="text-xs text-blue-600 mb-1">
                                        Per Siswa
                                    </p>
                                    <p className="font-bold text-blue-900">
                                        {formatRp(activeEvent.perStudentAmount)}
                                    </p>
                                </div>
                                <div className="bg-yellow-50 p-3 rounded">
                                    <p className="text-xs text-yellow-600 mb-1">
                                        Sudah Bayar
                                    </p>
                                    <p className="font-bold text-yellow-900">
                                        {activeEvent.studentsPaid.length}/
                                        {students.length}
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Modal Body */}
                        <div className="p-6 space-y-6">
                            {/* Action Buttons */}
                            <div className="flex gap-2">
                                <button
                                    onClick={() => setShowPaymentModal(true)}
                                    className="flex-1 bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition flex items-center justify-center gap-2"
                                >
                                    <Plus className="w-4 h-4" />
                                    Tambah Pembayaran
                                </button>
                                {activeEvent.totalCollected >=
                                    activeEvent.targetAmount && (
                                    <button
                                        onClick={() =>
                                            handleCompleteEvent(activeEvent._id)
                                        }
                                        className="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition flex items-center justify-center gap-2"
                                    >
                                        <CheckCircle className="w-4 h-4" />
                                        Selesaikan Event
                                    </button>
                                )}
                                <button
                                    onClick={() =>
                                        handleDeleteEvent(activeEvent._id)
                                    }
                                    className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition"
                                >
                                    <Trash2 className="w-4 h-4" />
                                </button>
                            </div>

                            {/* Unpaid Students */}
                            {getUnpaidStudents(activeEvent).length > 0 && (
                                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                                    <h4 className="font-semibold text-yellow-900 mb-2">
                                        Siswa Belum Bayar (
                                        {getUnpaidStudents(activeEvent).length})
                                    </h4>
                                    <div className="flex flex-wrap gap-2">
                                        {getUnpaidStudents(activeEvent).map(
                                            (student) => (
                                                <span
                                                    key={student._id}
                                                    className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded text-sm"
                                                >
                                                    {student.absen}.{' '}
                                                    {student.name}
                                                </span>
                                            )
                                        )}
                                    </div>
                                </div>
                            )}

                            {/* Payment History */}
                            <div>
                                <h4 className="font-semibold text-gray-800 mb-3">
                                    Riwayat Pembayaran
                                </h4>
                                <div className="border rounded-lg overflow-hidden">
                                    <table className="w-full">
                                        <thead className="bg-gray-50">
                                            <tr>
                                                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500">
                                                    Tanggal
                                                </th>
                                                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500">
                                                    Nama
                                                </th>
                                                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500">
                                                    Jumlah
                                                </th>
                                                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500">
                                                    Metode
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody className="divide-y">
                                            {eventPayments.map((payment) => (
                                                <tr key={payment._id}>
                                                    <td className="px-4 py-2 text-sm">
                                                        {new Date(
                                                            payment.date
                                                        ).toLocaleDateString(
                                                            'id-ID'
                                                        )}
                                                    </td>
                                                    <td className="px-4 py-2 text-sm font-medium">
                                                        {payment.studentId
                                                            ?.name || '-'}
                                                    </td>
                                                    <td className="px-4 py-2 text-sm">
                                                        {formatRp(
                                                            payment.amount
                                                        )}
                                                    </td>
                                                    <td className="px-4 py-2 text-sm">
                                                        <span
                                                            className={`px-2 py-1 text-xs rounded-full ${
                                                                payment.method ===
                                                                'Tunai'
                                                                    ? 'bg-green-100 text-green-800'
                                                                    : 'bg-blue-100 text-blue-800'
                                                            }`}
                                                        >
                                                            {payment.method}
                                                        </span>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* Create Event Modal */}
            {showCreateEvent && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg max-w-2xl w-full p-6">
                        <h3 className="text-xl font-bold mb-4">
                            Buat Event Baru
                        </h3>
                        <form
                            onSubmit={handleCreateEvent}
                            className="space-y-4"
                        >
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Nama Event
                                </label>
                                <input
                                    type="text"
                                    name="name"
                                    required
                                    placeholder="Contoh: Study Tour"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Deskripsi
                                </label>
                                <textarea
                                    name="description"
                                    rows="2"
                                    placeholder="Deskripsi singkat event"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                />
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Target Iuran Total
                                    </label>
                                    <input
                                        type="number"
                                        name="targetAmount"
                                        required
                                        id="targetAmount"
                                        onChange={(e) => {
                                            const target =
                                                parseInt(e.target.value) || 0;
                                            const perStudent =
                                                students.length > 0
                                                    ? Math.ceil(
                                                          target /
                                                              students.length
                                                      )
                                                    : 0;
                                            document.getElementById(
                                                'perStudentAmount'
                                            ).value = perStudent;
                                            document.getElementById(
                                                'calculatedInfo'
                                            ).textContent =
                                                students.length > 0
                                                    ? `${formatRp(target)} ÷ ${
                                                          students.length
                                                      } siswa = ${formatRp(
                                                          perStudent
                                                      )}`
                                                    : 'Belum ada data siswa. Silakan tambahkan siswa terlebih dahulu.';
                                        }}
                                        placeholder="100000"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Iuran Per Siswa
                                    </label>
                                    <input
                                        type="number"
                                        name="perStudentAmount"
                                        required
                                        id="perStudentAmount"
                                        placeholder="3500"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                    />
                                </div>
                            </div>

                            <div className="bg-blue-50 border border-blue-200 rounded p-3 text-sm">
                                <p
                                    className="text-blue-800"
                                    id="calculatedInfo"
                                >
                                    Masukkan target iuran untuk kalkulasi
                                    otomatis
                                </p>
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Tanggal Mulai
                                    </label>
                                    <input
                                        type="date"
                                        name="startDate"
                                        required
                                        defaultValue={
                                            new Date()
                                                .toISOString()
                                                .split('T')[0]
                                        }
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Tanggal Selesai
                                    </label>
                                    <input
                                        type="date"
                                        name="endDate"
                                        required
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                    />
                                </div>
                            </div>

                            <div className="flex gap-3 pt-4">
                                <button
                                    type="button"
                                    onClick={() => setShowCreateEvent(false)}
                                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
                                >
                                    Batal
                                </button>
                                <button
                                    type="submit"
                                    className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition"
                                >
                                    Buat Event
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}

            {/* Add Payment Modal */}
            {showPaymentModal && activeEvent && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg max-w-md w-full p-6">
                        <h3 className="text-xl font-bold mb-4">
                            Tambah Pembayaran Event
                        </h3>
                        <form onSubmit={handleAddPayment} className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Siswa
                                </label>
                                <select
                                    name="studentId"
                                    required
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                >
                                    <option value="">Pilih Siswa</option>
                                    {students
                                        .sort((a, b) => a.absen - b.absen)
                                        .map((student) => (
                                            <option
                                                key={student._id}
                                                value={student._id}
                                            >
                                                {student.absen}. {student.name}
                                            </option>
                                        ))}
                                </select>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Jumlah
                                </label>
                                <input
                                    type="number"
                                    name="amount"
                                    defaultValue={activeEvent.perStudentAmount}
                                    required
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    Default:{' '}
                                    {formatRp(activeEvent.perStudentAmount)}
                                </p>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Tanggal
                                </label>
                                <input
                                    type="date"
                                    name="date"
                                    defaultValue={
                                        new Date().toISOString().split('T')[0]
                                    }
                                    required
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Metode
                                </label>
                                <select
                                    name="method"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                >
                                    <option>Tunai</option>
                                    <option>Transfer</option>
                                </select>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Catatan (opsional)
                                </label>
                                <input
                                    type="text"
                                    name="note"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                />
                            </div>

                            <div className="flex gap-3">
                                <button
                                    type="button"
                                    onClick={() => setShowPaymentModal(false)}
                                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
                                >
                                    Batal
                                </button>
                                <button
                                    type="submit"
                                    className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition"
                                >
                                    Simpan
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};

export default EventManagement;


components/EventReminderTab.jsx
import React from 'react';
import {
    Calendar,
    Users,
    CheckCircle,
    Eye,
    Send,
    AlertCircle,
} from 'lucide-react';

const EventReminderTab = ({
    events,
    selectedEvent,
    eventUnpaidStudents,
    eventCategory,
    eventCategories,
    groupId,
    groupPreview,
    loading,
    sending,
    handleEventSelect,
    setEventCategory,
    setGroupId,
    handlePreviewEventGroup,
    handleSendEventToGroup,
}) => {
    return (
        <div className="space-y-6">
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border-2 border-blue-200">
                <h3 className="font-bold text-lg mb-3 text-blue-900 flex items-center gap-2">
                    <Calendar className="w-6 h-6" />
                    Reminder Pembayaran Event ke Grup
                </h3>
                <p className="text-gray-700 mb-2">
                    Kirim reminder khusus untuk pembayaran event ke grup
                    WhatsApp dengan mention semua yang belum bayar.
                </p>
                <div className="bg-white/70 p-3 rounded border border-blue-200">
                    <p className="text-sm text-gray-700">
                        <strong>Keunggulan:</strong>
                    </p>
                    <ul className="text-sm text-gray-700 ml-4 mt-2 space-y-1">
                        <li>
                            • Satu pesan grup dengan @mention semua yang belum
                            bayar
                        </li>
                        <li>• Tracking progress pembayaran event real-time</li>
                        <li>• Transparansi untuk semua anggota grup</li>
                        <li>• Hemat - hanya 1 API call untuk semua siswa</li>
                    </ul>
                </div>
            </div>

            {/* Event Selection */}
            <div className="bg-white p-4 rounded-lg border">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Pilih Event
                </label>
                <select
                    value={selectedEvent?._id || ''}
                    onChange={(e) => handleEventSelect(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                    <option value="">-- Pilih Event --</option>
                    {events.map((event) => (
                        <option key={event._id} value={event._id}>
                            {event.name} - Rp{' '}
                            {event.perStudentAmount.toLocaleString('id-ID')}{' '}
                            (Deadline:{' '}
                            {new Date(event.endDate).toLocaleDateString(
                                'id-ID'
                            )}
                            )
                        </option>
                    ))}
                </select>
            </div>

            {selectedEvent && (
                <>
                    {/* Event Info */}
                    <div className="bg-gradient-to-r from-green-50 to-teal-50 p-4 rounded-lg border">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <p className="text-sm text-gray-600">
                                    Target Total
                                </p>
                                <p className="text-xl font-bold text-gray-800">
                                    Rp{' '}
                                    {selectedEvent.targetAmount.toLocaleString(
                                        'id-ID'
                                    )}
                                </p>
                            </div>
                            <div>
                                <p className="text-sm text-gray-600">
                                    Per Siswa
                                </p>
                                <p className="text-xl font-bold text-gray-800">
                                    Rp{' '}
                                    {selectedEvent.perStudentAmount.toLocaleString(
                                        'id-ID'
                                    )}
                                </p>
                            </div>
                            <div>
                                <p className="text-sm text-gray-600">
                                    Sudah Bayar
                                </p>
                                <p className="text-xl font-bold text-green-600">
                                    {selectedEvent.studentsPaid.length} siswa
                                </p>
                            </div>
                        </div>
                        <div className="mt-3">
                            <div className="flex justify-between text-sm text-gray-600 mb-1">
                                <span>Progress Pembayaran</span>
                                <span>
                                    {selectedEvent.studentsPaid.length > 0
                                        ? Math.round(
                                              ((selectedEvent.studentsPaid
                                                  .length *
                                                  selectedEvent.perStudentAmount) /
                                                  selectedEvent.targetAmount) *
                                                  100
                                          )
                                        : 0}
                                    %
                                </span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-3">
                                <div
                                    className="bg-green-600 h-3 rounded-full transition-all"
                                    style={{
                                        width: `${
                                            selectedEvent.studentsPaid.length >
                                            0
                                                ? Math.min(
                                                      ((selectedEvent
                                                          .studentsPaid.length *
                                                          selectedEvent.perStudentAmount) /
                                                          selectedEvent.targetAmount) *
                                                          100,
                                                      100
                                                  )
                                                : 0
                                        }%`,
                                    }}
                                />
                            </div>
                        </div>
                    </div>

                    {/* Message Category */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            Pilih Style Pesan
                        </label>
                        <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                            {eventCategories.map((cat) => (
                                <button
                                    key={cat.value}
                                    onClick={() => setEventCategory(cat.value)}
                                    className={`p-3 rounded-lg border-2 text-center transition-all ${
                                        eventCategory === cat.value
                                            ? 'border-blue-500 bg-blue-50'
                                            : 'border-gray-200 hover:border-gray-300'
                                    }`}
                                >
                                    <div className="text-sm font-medium">
                                        {cat.label}
                                    </div>
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Unpaid Students Summary */}
                    <div className="bg-white rounded-lg border">
                        <div className="p-4 border-b">
                            <h4 className="font-semibold text-gray-800">
                                Siswa yang Belum Bayar (
                                {eventUnpaidStudents.length})
                            </h4>
                        </div>
                        <div className="p-4">
                            {eventUnpaidStudents.length === 0 ? (
                                <div className="text-center py-8 text-gray-500">
                                    <CheckCircle className="w-12 h-12 mx-auto mb-2 text-green-500" />
                                    <p className="font-medium text-green-700">
                                        Semua siswa sudah bayar! 🎉
                                    </p>
                                    <p className="text-sm mt-1">
                                        Event ini sudah lunas
                                    </p>
                                </div>
                            ) : (
                                <div>
                                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-3">
                                        <p className="text-sm text-yellow-800">
                                            <strong>Info:</strong>{' '}
                                            {eventUnpaidStudents.length} siswa
                                            belum melakukan pembayaran. Pesan
                                            grup akan mention semua nomor
                                            mereka.
                                        </p>
                                    </div>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2 max-h-60 overflow-y-auto">
                                        {eventUnpaidStudents.map((student) => (
                                            <div
                                                key={student._id}
                                                className="flex items-center gap-2 p-2 bg-gray-50 rounded"
                                            >
                                                <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                                                <div className="flex-1">
                                                    <p className="font-medium text-sm text-gray-800">
                                                        {student.name}
                                                    </p>
                                                    <p className="text-xs text-gray-600">
                                                        {student.phoneNumber ||
                                                            '(Tanpa WA)'}
                                                    </p>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>

                    {/* Group ID Input and Send */}
                    {eventUnpaidStudents.length > 0 && (
                        <div className="bg-purple-50 rounded-lg border-2 border-purple-200 p-6">
                            <h4 className="font-semibold text-purple-900 mb-4 flex items-center gap-2">
                                <Users className="w-5 h-5" />
                                Kirim ke Grup WhatsApp
                            </h4>

                            <div className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Group ID WhatsApp
                                    </label>
                                    <input
                                        type="text"
                                        value={groupId}
                                        onChange={(e) =>
                                            setGroupId(e.target.value)
                                        }
                                        placeholder="628xxxxxxxxxx-xxxxxxxxx@g.us"
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                                    />
                                    <p className="text-xs text-gray-500 mt-1">
                                        Format: 628xxx-xxx@g.us (dapatkan dari
                                        bot atau WhatsApp Web)
                                    </p>
                                </div>

                                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                    <button
                                        onClick={handlePreviewEventGroup}
                                        disabled={loading || !groupId.trim()}
                                        className="flex items-center justify-center gap-2 px-4 py-3 bg-white border-2 border-purple-300 text-purple-700 rounded-lg hover:bg-purple-50 disabled:bg-gray-100 disabled:text-gray-400 disabled:border-gray-200 transition-colors"
                                    >
                                        <Eye className="w-5 h-5" />
                                        Preview Pesan
                                    </button>

                                    <button
                                        onClick={handleSendEventToGroup}
                                        disabled={sending || !groupId.trim()}
                                        className="flex items-center justify-center gap-2 px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-300 transition-colors font-medium"
                                    >
                                        <Send className="w-5 h-5" />
                                        {sending
                                            ? 'Mengirim...'
                                            : `Kirim ke Grup (${eventUnpaidStudents.length} mention)`}
                                    </button>
                                </div>

                                {groupPreview && (
                                    <div className="bg-white p-4 rounded-lg border mt-4">
                                        <p className="text-sm font-medium text-gray-700 mb-2">
                                            Preview Pesan:
                                        </p>
                                        <div className="bg-gray-50 p-3 rounded">
                                            <pre className="text-sm whitespace-pre-wrap text-gray-800 font-mono">
                                                {groupPreview}
                                            </pre>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    )}

                    {/* How to get Group ID */}
                    <div className="bg-gray-50 rounded-lg p-4 border">
                        <h4 className="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                            <AlertCircle className="w-4 h-4" />
                            Cara Mendapatkan Group ID
                        </h4>
                        <ol className="text-sm text-gray-700 space-y-2 ml-4">
                            <li>
                                <strong>1. Via Bot Fonnte:</strong>
                                <ul className="ml-4 mt-1 space-y-1">
                                    <li>• Tambahkan bot ke grup WhatsApp</li>
                                    <li>
                                        • Kirim perintah{' '}
                                        <code className="bg-gray-200 px-1 rounded">
                                            /getid
                                        </code>{' '}
                                        di grup
                                    </li>
                                    <li>• Bot akan reply dengan Group ID</li>
                                </ul>
                            </li>
                            <li>
                                <strong>2. Via WhatsApp Web:</strong>
                                <ul className="ml-4 mt-1 space-y-1">
                                    <li>• Buka WhatsApp Web dan grup</li>
                                    <li>• Buka Developer Console (F12)</li>
                                    <li>
                                        • Ketik:{' '}
                                        <code className="bg-gray-200 px-1 rounded">
                                            window.location.href
                                        </code>
                                    </li>
                                    <li>• Copy Group ID dari URL</li>
                                </ul>
                            </li>
                        </ol>
                    </div>
                </>
            )}
        </div>
    );
};

export default EventReminderTab;


components/NotificationManager.jsx
import React, { useState, useEffect } from 'react';
import {
    Bell,
    Send,
    Users,
    MessageSquare,
    CheckCircle,
    XCircle,
    AlertCircle,
    RefreshCw,
    Eye,
    Settings,
    TrendingUp,
    Clock,
    Zap,
    Calendar,
    Target,
} from 'lucide-react';
import axios from 'axios';
import EventReminderTab from './EventReminderTab';

const API_URL = 'http://localhost:5000/api';

const NotificationManager = () => {
    const [students, setStudents] = useState([]);
    const [needsReminder, setNeedsReminder] = useState([]);
    const [notifications, setNotifications] = useState([]);
    const [stats, setStats] = useState(null);
    const [apiStatus, setApiStatus] = useState(null);

    const [loading, setLoading] = useState(false);
    const [sending, setSending] = useState(false);
    const [selectedStudents, setSelectedStudents] = useState([]);
    const [messageCategory, setMessageCategory] = useState('friendly');
    const [previewMessage, setPreviewMessage] = useState('');
    const [showPreview, setShowPreview] = useState(false);
    const [minWeeks, setMinWeeks] = useState(1);

    // Group message states
    const [showGroupModal, setShowGroupModal] = useState(false);
    const [groupId, setGroupId] = useState('');
    const [groupPreview, setGroupPreview] = useState('');

    // Event reminder states
    const [events, setEvents] = useState([]);
    const [selectedEvent, setSelectedEvent] = useState(null);
    const [eventUnpaidStudents, setEventUnpaidStudents] = useState([]);
    const [eventCategory, setEventCategory] = useState('friendly');
    const [selectedEventStudents, setSelectedEventStudents] = useState([]);

    const [activeTab, setActiveTab] = useState('send'); // send, history, stats, group, event

    const categories = [
        { value: 'friendly', label: '😊 Friendly & Santai', color: 'blue' },
        { value: 'motivational', label: '💪 Motivasi', color: 'green' },
        { value: 'formal', label: '📋 Formal', color: 'gray' },
        { value: 'energetic', label: '⚡ Energetik', color: 'yellow' },
        { value: 'humorous', label: '😄 Humor', color: 'pink' },
        { value: 'gentle', label: '🌸 Gentle', color: 'purple' },
    ];

    const eventCategories = [
        { value: 'friendly', label: '😊 Friendly & Santai', color: 'blue' },
        { value: 'urgent', label: '⚡ Urgent', color: 'red' },
        { value: 'formal', label: '📋 Formal', color: 'gray' },
        { value: 'motivational', label: '💪 Motivasi', color: 'green' },
        { value: 'humorous', label: '😄 Humor', color: 'pink' },
    ];

    useEffect(() => {
        loadData();
        checkApiStatus();
    }, []);

    const loadData = async () => {
        setLoading(true);
        try {
            const [studentsRes, reminderRes, notificationsRes, statsRes] =
                await Promise.all([
                    axios.get(`${API_URL}/students`),
                    axios.get(
                        `${API_URL}/notifications/needs-reminder?minWeeks=${minWeeks}`
                    ),
                    axios.get(`${API_URL}/notifications`),
                    axios.get(`${API_URL}/notifications/stats`),
                ]);

            setStudents(studentsRes.data);
            setNeedsReminder(reminderRes.data.students || []);
            setNotifications(notificationsRes.data);
            setStats(statsRes.data);
        } catch (error) {
            console.error('Error loading data:', error);
        } finally {
            setLoading(false);
        }
    };

    const checkApiStatus = async () => {
        try {
            const response = await axios.get(`${API_URL}/notifications/status`);
            setApiStatus(response.data);
        } catch (error) {
            setApiStatus({ connected: false, error: error.message });
        }
    };

    const handlePreview = async () => {
        try {
            const sample = needsReminder[0];
            if (!sample) {
                alert('Tidak ada siswa yang perlu reminder');
                return;
            }

            const response = await axios.post(
                `${API_URL}/notifications/preview`,
                {
                    category: messageCategory,
                    studentName: sample.student.name,
                    weeksLate: sample.weeksLate,
                    amount: sample.amountOwed,
                }
            );

            setPreviewMessage(response.data.message);
            setShowPreview(true);
        } catch (error) {
            alert('Error generating preview: ' + error.message);
        }
    };

    const handleSendBulk = async () => {
        if (selectedStudents.length === 0 && needsReminder.length === 0) {
            alert('Tidak ada siswa yang dipilih atau perlu reminder');
            return;
        }

        const confirmMessage =
            selectedStudents.length > 0
                ? `Kirim reminder ke ${selectedStudents.length} siswa terpilih?`
                : `Kirim reminder ke semua siswa yang telat ≥ ${minWeeks} minggu (${needsReminder.length} siswa)?`;

        if (!confirm(confirmMessage)) return;

        setSending(true);
        try {
            const response = await axios.post(
                `${API_URL}/notifications/send-bulk-reminder`,
                {
                    studentIds:
                        selectedStudents.length > 0
                            ? selectedStudents
                            : undefined,
                    category: messageCategory,
                    minWeeks: minWeeks,
                }
            );

            alert(
                `Pengiriman selesai!\n\n` +
                    `✅ Berhasil: ${response.data.summary.success}\n` +
                    `❌ Gagal: ${response.data.summary.failed}\n` +
                    `⏭️  Dilewati: ${response.data.summary.skipped}`
            );

            // Reload data
            await loadData();
            setSelectedStudents([]);
        } catch (error) {
            alert('Error mengirim reminder: ' + error.message);
        } finally {
            setSending(false);
        }
    };

    const handleSendSingle = async (studentData) => {
        if (!confirm(`Kirim reminder ke ${studentData.student.name}?`)) return;

        try {
            await axios.post(
                `${API_URL}/notifications/send-reminder/${studentData.student._id}`,
                {
                    category: messageCategory,
                    weeksLate: studentData.weeksLate,
                    amount: studentData.amountOwed,
                }
            );

            alert('✅ Reminder berhasil dikirim!');
            await loadData();
        } catch (error) {
            alert('❌ Error: ' + error.message);
        }
    };

    const toggleStudentSelection = (studentId) => {
        setSelectedStudents((prev) =>
            prev.includes(studentId)
                ? prev.filter((id) => id !== studentId)
                : [...prev, studentId]
        );
    };

    const selectAll = () => {
        const allIds = needsReminder.map((s) => s.student._id);
        setSelectedStudents(allIds);
    };

    const deselectAll = () => {
        setSelectedStudents([]);
    };

    // Handle preview group message
    const handleGroupPreview = async () => {
        try {
            const response = await axios.post(
                `${API_URL}/notifications/preview-group`,
                {
                    category: messageCategory,
                    minWeeks: minWeeks,
                }
            );

            if (!response.data.message) {
                alert('Tidak ada siswa yang perlu diingatkan');
                return;
            }

            setGroupPreview(response.data.message);
            setShowPreview(true);
        } catch (error) {
            alert('Error generating preview: ' + error.message);
        }
    };

    // Handle send to group
    const handleSendToGroup = async () => {
        if (!groupId.trim()) {
            alert(
                'Group ID tidak boleh kosong!\n\nFormat: 628xxxxxxxxxx-xxxxxxxxx@g.us'
            );
            return;
        }

        if (
            !confirm(
                `Kirim reminder ke grup WhatsApp?\n\n` +
                    `Group ID: ${groupId}\n` +
                    `Siswa yang akan di-mention: ${needsReminder.length}\n` +
                    `Style: ${messageCategory}`
            )
        )
            return;

        setSending(true);
        try {
            const response = await axios.post(
                `${API_URL}/notifications/send-to-group`,
                {
                    groupId: groupId.trim(),
                    category: messageCategory,
                    minWeeks: minWeeks,
                }
            );

            alert(
                `${response.data.testMode ? '🧪 TEST MODE\n\n' : ''}` +
                    `✅ ${response.data.message}\n\n` +
                    `Siswa yang di-mention: ${response.data.studentsCount}`
            );

            setShowGroupModal(false);
            await loadData();
        } catch (error) {
            alert('❌ Error: ' + error.message);
        } finally {
            setSending(false);
        }
    };

    // Event reminder functions
    const loadEvents = async () => {
        try {
            const response = await axios.get(`${API_URL}/events`);
            setEvents(response.data);
        } catch (error) {
            console.error('Error loading events:', error);
        }
    };

    const handleEventSelect = async (eventId) => {
        if (!eventId) {
            setSelectedEvent(null);
            setEventUnpaidStudents([]);
            return;
        }

        try {
            // Fetch fresh event data from API to get latest studentsPaid
            const eventRes = await axios.get(`${API_URL}/events/${eventId}`);
            const event = eventRes.data;
            setSelectedEvent(event);

            // Get list of students who haven't paid for this event
            const allStudentsRes = await axios.get(`${API_URL}/students`);
            const allStudents = allStudentsRes.data;

            // Filter students who haven't paid - show all, not just those with WA
            const unpaid = allStudents.filter(
                (student) =>
                    !event.studentsPaid.some(
                        (paidId) => paidId.toString() === student._id.toString()
                    )
            );

            console.log('Event:', event.name);
            console.log('Total students:', allStudents.length);
            console.log('Students paid:', event.studentsPaid.length);
            console.log('Students paid IDs:', event.studentsPaid);
            console.log('Unpaid students:', unpaid.length);
            console.log(
                'Unpaid list:',
                unpaid.map((s) => s.name)
            );

            setEventUnpaidStudents(unpaid);
        } catch (error) {
            alert('Error loading event details: ' + error.message);
        }
    };

    const handlePreviewEventReminder = async () => {
        if (!selectedEvent) {
            alert('Pilih event terlebih dahulu');
            return;
        }

        if (eventUnpaidStudents.length === 0) {
            alert(
                'Tidak ada siswa yang belum bayar atau memiliki WhatsApp aktif'
            );
            return;
        }

        try {
            const response = await axios.post(
                `${API_URL}/notifications/preview-event-reminder/${selectedEvent._id}`,
                {
                    category: eventCategory,
                }
            );

            setPreviewMessage(response.data.message);
            setShowPreview(true);
        } catch (error) {
            alert('Error generating preview: ' + error.message);
        }
    };

    const handlePreviewEventGroup = async () => {
        if (!selectedEvent) {
            alert('Pilih event terlebih dahulu');
            return;
        }

        try {
            const response = await axios.post(
                `${API_URL}/notifications/preview-event-reminder-group/${selectedEvent._id}`,
                {
                    category: eventCategory,
                }
            );

            setGroupPreview(response.data.message);
            setShowPreview(true);
        } catch (error) {
            alert('Error generating preview: ' + error.message);
        }
    };

    const handleSendEventReminder = async (studentId) => {
        if (!selectedEvent) return;

        if (!confirm('Kirim reminder event ke siswa ini?')) return;

        setSending(true);
        try {
            const response = await axios.post(
                `${API_URL}/notifications/send-event-reminder/${studentId}/${selectedEvent._id}`,
                {
                    category: eventCategory,
                }
            );

            alert(`✅ ${response.data.message}`);
            await handleEventSelect(selectedEvent._id);
        } catch (error) {
            alert('❌ Error: ' + error.message);
        } finally {
            setSending(false);
        }
    };

    const handleSendEventBulk = async () => {
        if (!selectedEvent) {
            alert('Pilih event terlebih dahulu');
            return;
        }

        const studentsToSend =
            selectedEventStudents.length > 0
                ? selectedEventStudents
                : eventUnpaidStudents.map((s) => s._id);

        if (studentsToSend.length === 0) {
            alert('Tidak ada siswa yang dipilih');
            return;
        }

        const confirmMessage =
            selectedEventStudents.length > 0
                ? `Kirim reminder event "${selectedEvent.name}" ke ${selectedEventStudents.length} siswa terpilih?`
                : `Kirim reminder event "${selectedEvent.name}" ke semua siswa yang belum bayar (${eventUnpaidStudents.length} siswa)?`;

        if (!confirm(confirmMessage)) return;

        setSending(true);
        try {
            const response = await axios.post(
                `${API_URL}/notifications/send-event-reminder-bulk/${selectedEvent._id}`,
                {
                    studentIds:
                        selectedEventStudents.length > 0
                            ? selectedEventStudents
                            : undefined,
                    category: eventCategory,
                }
            );

            alert(
                `Pengiriman selesai!\n\n` +
                    `✅ Berhasil: ${response.data.summary.success}\n` +
                    `❌ Gagal: ${response.data.summary.failed}\n` +
                    `⏭️  Dilewati: ${response.data.summary.skipped}`
            );

            setSelectedEventStudents([]);
            await handleEventSelect(selectedEvent._id);
        } catch (error) {
            alert('❌ Error: ' + error.message);
        } finally {
            setSending(false);
        }
    };

    const handleSendEventToGroup = async () => {
        if (!selectedEvent) {
            alert('Pilih event terlebih dahulu');
            return;
        }

        if (!groupId.trim()) {
            alert(
                'Group ID tidak boleh kosong!\n\nFormat: 628xxxxxxxxxx-xxxxxxxxx@g.us'
            );
            return;
        }

        if (
            !confirm(
                `Kirim reminder event "${selectedEvent.name}" ke grup WhatsApp?\n\n` +
                    `Group ID: ${groupId}\n` +
                    `Siswa yang akan di-mention: ${eventUnpaidStudents.length}\n` +
                    `Style: ${eventCategory}`
            )
        )
            return;

        setSending(true);
        try {
            const response = await axios.post(
                `${API_URL}/notifications/send-event-reminder-group/${selectedEvent._id}`,
                {
                    groupId: groupId.trim(),
                    category: eventCategory,
                }
            );

            if (response.data.success) {
                alert(
                    `${response.data.testMode ? '🧪 TEST MODE\n\n' : ''}` +
                        `✅ ${response.data.message}\n\n` +
                        `Siswa yang di-mention: ${response.data.studentsCount}`
                );
                setShowGroupModal(false);
                await handleEventSelect(selectedEvent._id);
            } else {
                alert(
                    `❌ Gagal mengirim pesan\n\n` +
                        `Error: ${response.data.error}\n` +
                        `${
                            response.data.detail
                                ? '\nDetail: ' +
                                  JSON.stringify(response.data.detail)
                                : ''
                        }`
                );
            }
        } catch (error) {
            const errorMsg = error.response?.data?.error || error.message;
            const errorDetail = error.response?.data?.detail;

            alert(
                `❌ Error mengirim reminder:\n\n` +
                    `${errorMsg}\n` +
                    `${
                        errorDetail
                            ? '\nDetail: ' + JSON.stringify(errorDetail)
                            : ''
                    }\n\n` +
                    `Cek:\n` +
                    `1. Group ID benar (format: 628xxx-xxx@g.us)\n` +
                    `2. Bot sudah ditambahkan ke grup\n` +
                    `3. API Token Fonnte masih aktif\n` +
                    `4. Nomor WA siswa dalam format yang benar`
            );
            console.error('Send error:', error.response?.data || error);
        } finally {
            setSending(false);
        }
    };

    useEffect(() => {
        loadData();
        loadEvents();
        checkApiStatus();
    }, []);

    useEffect(() => {
        if (activeTab === 'event') {
            loadEvents();
        }
    }, [activeTab]);

    return (
        <div className="max-w-7xl mx-auto p-6">
            {/* Header */}
            <div className="mb-6">
                <div className="flex items-center justify-between mb-4">
                    <div>
                        <h1 className="text-3xl font-bold text-gray-800 flex items-center gap-2">
                            <Bell className="w-8 h-8 text-blue-600" />
                            WhatsApp Notification Center
                        </h1>
                        <p className="text-gray-600 mt-1">
                            Kirim reminder otomatis ke siswa yang belum bayar
                            kas
                        </p>
                    </div>

                    <button
                        onClick={loadData}
                        disabled={loading}
                        className="flex items-center gap-2 px-4 py-2 bg-white border-2 border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                        <RefreshCw
                            className={`w-4 h-4 ${
                                loading ? 'animate-spin' : ''
                            }`}
                        />
                        Refresh
                    </button>
                </div>

                {/* API Status */}
                {apiStatus && (
                    <div
                        className={`flex items-center gap-2 p-3 rounded-lg ${
                            apiStatus.testMode
                                ? 'bg-yellow-50 border border-yellow-200'
                                : apiStatus.connected
                                ? 'bg-green-50 border border-green-200'
                                : 'bg-red-50 border border-red-200'
                        }`}
                    >
                        {apiStatus.testMode ? (
                            <>
                                <AlertCircle className="w-5 h-5 text-yellow-600" />
                                <span className="text-yellow-800 font-medium">
                                    TEST MODE - Pesan tidak akan benar-benar
                                    dikirim
                                </span>
                            </>
                        ) : apiStatus.connected ? (
                            <>
                                <CheckCircle className="w-5 h-5 text-green-600" />
                                <span className="text-green-800">
                                    WhatsApp API Connected • Device:{' '}
                                    {apiStatus.device}
                                </span>
                            </>
                        ) : (
                            <>
                                <XCircle className="w-5 h-5 text-red-600" />
                                <span className="text-red-800">
                                    WhatsApp API Tidak Terhubung - Set
                                    FONNTE_API_TOKEN di .env
                                </span>
                            </>
                        )}
                    </div>
                )}
            </div>

            {/* Stats Cards */}
            {stats && (
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div className="bg-white p-4 rounded-lg shadow border-l-4 border-blue-500">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-gray-600 text-sm">
                                    Total Terkirim
                                </p>
                                <p className="text-2xl font-bold text-gray-800">
                                    {stats.sent}
                                </p>
                            </div>
                            <CheckCircle className="w-8 h-8 text-blue-500" />
                        </div>
                    </div>

                    <div className="bg-white p-4 rounded-lg shadow border-l-4 border-red-500">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-gray-600 text-sm">Gagal</p>
                                <p className="text-2xl font-bold text-gray-800">
                                    {stats.failed}
                                </p>
                            </div>
                            <XCircle className="w-8 h-8 text-red-500" />
                        </div>
                    </div>

                    <div className="bg-white p-4 rounded-lg shadow border-l-4 border-green-500">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-gray-600 text-sm">
                                    7 Hari Terakhir
                                </p>
                                <p className="text-2xl font-bold text-gray-800">
                                    {stats.last7Days}
                                </p>
                            </div>
                            <TrendingUp className="w-8 h-8 text-green-500" />
                        </div>
                    </div>

                    <div className="bg-white p-4 rounded-lg shadow border-l-4 border-yellow-500">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-gray-600 text-sm">
                                    Perlu Reminder
                                </p>
                                <p className="text-2xl font-bold text-gray-800">
                                    {needsReminder.length}
                                </p>
                            </div>
                            <Bell className="w-8 h-8 text-yellow-500" />
                        </div>
                    </div>
                </div>
            )}

            {/* Tabs */}
            <div className="bg-white rounded-lg shadow mb-6">
                <div className="flex border-b">
                    <button
                        onClick={() => setActiveTab('send')}
                        className={`flex items-center gap-2 px-6 py-3 font-medium transition-colors ${
                            activeTab === 'send'
                                ? 'text-blue-600 border-b-2 border-blue-600'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        <Send className="w-4 h-4" />
                        Kirim Individual
                    </button>

                    <button
                        onClick={() => setActiveTab('group')}
                        className={`flex items-center gap-2 px-6 py-3 font-medium transition-colors ${
                            activeTab === 'group'
                                ? 'text-blue-600 border-b-2 border-blue-600'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        <Users className="w-4 h-4" />
                        Kirim ke Grup
                    </button>

                    <button
                        onClick={() => setActiveTab('event')}
                        className={`flex items-center gap-2 px-6 py-3 font-medium transition-colors ${
                            activeTab === 'event'
                                ? 'text-blue-600 border-b-2 border-blue-600'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        <Calendar className="w-4 h-4" />
                        Reminder Event
                    </button>

                    <button
                        onClick={() => setActiveTab('history')}
                        className={`flex items-center gap-2 px-6 py-3 font-medium transition-colors ${
                            activeTab === 'history'
                                ? 'text-blue-600 border-b-2 border-blue-600'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        <Clock className="w-4 h-4" />
                        Riwayat
                    </button>

                    <button
                        onClick={() => setActiveTab('settings')}
                        className={`flex items-center gap-2 px-6 py-3 font-medium transition-colors ${
                            activeTab === 'settings'
                                ? 'text-blue-600 border-b-2 border-blue-600'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        <Settings className="w-4 h-4" />
                        Pengaturan
                    </button>
                </div>

                {/* Tab Content */}
                <div className="p-6">
                    {activeTab === 'send' && (
                        <div className="space-y-6">
                            {/* Configuration */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Minimum Minggu Telat
                                    </label>
                                    <select
                                        value={minWeeks}
                                        onChange={(e) => {
                                            setMinWeeks(Number(e.target.value));
                                            setTimeout(loadData, 100);
                                        }}
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                                    >
                                        <option value="1">≥ 1 Minggu</option>
                                        <option value="2">≥ 2 Minggu</option>
                                        <option value="3">≥ 3 Minggu</option>
                                        <option value="4">≥ 4 Minggu</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Style Pesan
                                    </label>
                                    <select
                                        value={messageCategory}
                                        onChange={(e) =>
                                            setMessageCategory(e.target.value)
                                        }
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                                    >
                                        {categories.map((cat) => (
                                            <option
                                                key={cat.value}
                                                value={cat.value}
                                            >
                                                {cat.label}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>

                            {/* Actions */}
                            <div className="flex gap-3">
                                <button
                                    onClick={handlePreview}
                                    className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                                >
                                    <Eye className="w-4 h-4" />
                                    Preview Pesan
                                </button>

                                <button
                                    onClick={selectAll}
                                    className="px-4 py-2 bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100 transition-colors"
                                >
                                    Pilih Semua
                                </button>

                                <button
                                    onClick={deselectAll}
                                    className="px-4 py-2 bg-gray-50 text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
                                >
                                    Batal Pilih
                                </button>

                                <button
                                    onClick={handleSendBulk}
                                    disabled={sending}
                                    className="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 disabled:opacity-50 disabled:cursor-not-allowed transition-all ml-auto"
                                >
                                    {sending ? (
                                        <>
                                            <RefreshCw className="w-4 h-4 animate-spin" />
                                            Mengirim...
                                        </>
                                    ) : (
                                        <>
                                            <Zap className="w-4 h-4" />
                                            Kirim Reminder (
                                            {selectedStudents.length ||
                                                needsReminder.length}
                                            )
                                        </>
                                    )}
                                </button>
                            </div>

                            {/* Preview Modal */}
                            {showPreview && (
                                <div className="bg-gradient-to-br from-green-50 to-blue-50 p-6 rounded-lg border-2 border-blue-200">
                                    <div className="flex items-start justify-between mb-3">
                                        <h3 className="font-bold text-lg text-gray-800 flex items-center gap-2">
                                            <MessageSquare className="w-5 h-5 text-blue-600" />
                                            Preview Pesan
                                        </h3>
                                        <button
                                            onClick={() =>
                                                setShowPreview(false)
                                            }
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            ✕
                                        </button>
                                    </div>
                                    <div className="bg-white p-4 rounded-lg whitespace-pre-wrap font-mono text-sm border border-gray-200">
                                        {previewMessage}
                                    </div>
                                </div>
                            )}

                            {/* Students List */}
                            <div>
                                <h3 className="font-bold text-lg mb-3 flex items-center gap-2">
                                    <Users className="w-5 h-5 text-blue-600" />
                                    Siswa yang Perlu Reminder (
                                    {needsReminder.length})
                                </h3>

                                {needsReminder.length === 0 ? (
                                    <div className="text-center py-12 bg-gray-50 rounded-lg">
                                        <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-3" />
                                        <p className="text-gray-600 font-medium">
                                            Semua siswa sudah bayar! 🎉
                                        </p>
                                    </div>
                                ) : (
                                    <div className="space-y-2">
                                        {needsReminder.map((item) => (
                                            <div
                                                key={item.student._id}
                                                className={`flex items-center justify-between p-4 rounded-lg border-2 transition-all ${
                                                    selectedStudents.includes(
                                                        item.student._id
                                                    )
                                                        ? 'border-blue-500 bg-blue-50'
                                                        : 'border-gray-200 bg-white hover:border-gray-300'
                                                }`}
                                            >
                                                <div className="flex items-center gap-4">
                                                    <input
                                                        type="checkbox"
                                                        checked={selectedStudents.includes(
                                                            item.student._id
                                                        )}
                                                        onChange={() =>
                                                            toggleStudentSelection(
                                                                item.student._id
                                                            )
                                                        }
                                                        className="w-5 h-5 text-blue-600 rounded"
                                                    />

                                                    <div>
                                                        <p className="font-semibold text-gray-800">
                                                            {item.student.name}
                                                            <span className="text-gray-500 text-sm ml-2">
                                                                (Absen{' '}
                                                                {
                                                                    item.student
                                                                        .absen
                                                                }
                                                                )
                                                            </span>
                                                        </p>
                                                        <p className="text-sm text-gray-600">
                                                            📱{' '}
                                                            {item.student
                                                                .phoneNumber ||
                                                                'No WA belum diset'}
                                                        </p>
                                                    </div>
                                                </div>

                                                <div className="flex items-center gap-4">
                                                    <div className="text-right">
                                                        <p className="text-sm text-gray-600">
                                                            Telat{' '}
                                                            {item.weeksLate}{' '}
                                                            minggu
                                                        </p>
                                                        <p className="font-bold text-red-600">
                                                            Rp{' '}
                                                            {item.amountOwed.toLocaleString(
                                                                'id-ID'
                                                            )}
                                                        </p>
                                                    </div>

                                                    <button
                                                        onClick={() =>
                                                            handleSendSingle(
                                                                item
                                                            )
                                                        }
                                                        disabled={
                                                            !item.student
                                                                .phoneNumber
                                                        }
                                                        className="px-3 py-1 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
                                                    >
                                                        Kirim
                                                    </button>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>
                        </div>
                    )}

                    {activeTab === 'group' && (
                        <div className="space-y-6">
                            <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-6 rounded-lg border-2 border-purple-200">
                                <h3 className="font-bold text-lg mb-3 text-purple-900 flex items-center gap-2">
                                    <Users className="w-6 h-6" />
                                    Kirim Reminder ke Grup WhatsApp
                                </h3>
                                <p className="text-gray-700 mb-4">
                                    Fitur ini mengirim satu pesan ke grup
                                    WhatsApp dengan <strong>mention (@)</strong>{' '}
                                    semua siswa yang belum bayar.
                                </p>
                                <div className="bg-white/70 p-3 rounded border border-purple-200">
                                    <p className="text-sm text-gray-700">
                                        <strong>Keunggulan:</strong>
                                    </p>
                                    <ul className="text-sm text-gray-700 ml-4 mt-2 space-y-1">
                                        <li>
                                            • Hanya 1 pesan untuk semua siswa
                                        </li>
                                        <li>• Hemat kuota API</li>
                                        <li>
                                            • Semua siswa tahu siapa yang belum
                                            bayar
                                        </li>
                                        <li>
                                            • Otomatis @mention setiap nomor
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            {/* Configuration */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Group ID WhatsApp
                                    </label>
                                    <input
                                        type="text"
                                        value={groupId}
                                        onChange={(e) =>
                                            setGroupId(e.target.value)
                                        }
                                        placeholder="628xxxxxxxxxx-xxxxxxxxx@g.us"
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                                    />
                                    <p className="text-xs text-gray-500 mt-1">
                                        Format: 628xxx-xxx@g.us (lihat cara
                                        dapat Group ID di bawah)
                                    </p>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Minimum Minggu Telat
                                    </label>
                                    <select
                                        value={minWeeks}
                                        onChange={(e) => {
                                            setMinWeeks(Number(e.target.value));
                                            setTimeout(loadData, 100);
                                        }}
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                                    >
                                        <option value="1">≥ 1 Minggu</option>
                                        <option value="2">≥ 2 Minggu</option>
                                        <option value="3">≥ 3 Minggu</option>
                                        <option value="4">≥ 4 Minggu</option>
                                    </select>
                                </div>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Style Pesan
                                </label>
                                <select
                                    value={messageCategory}
                                    onChange={(e) =>
                                        setMessageCategory(e.target.value)
                                    }
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                                >
                                    {categories.map((cat) => (
                                        <option
                                            key={cat.value}
                                            value={cat.value}
                                        >
                                            {cat.label}
                                        </option>
                                    ))}
                                </select>
                            </div>

                            {/* Actions */}
                            <div className="flex gap-3">
                                <button
                                    onClick={handleGroupPreview}
                                    className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                                >
                                    <Eye className="w-4 h-4" />
                                    Preview Pesan
                                </button>

                                <button
                                    onClick={handleSendToGroup}
                                    disabled={sending || !groupId.trim()}
                                    className="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all ml-auto"
                                >
                                    {sending ? (
                                        <>
                                            <RefreshCw className="w-4 h-4 animate-spin" />
                                            Mengirim...
                                        </>
                                    ) : (
                                        <>
                                            <Users className="w-4 h-4" />
                                            Kirim ke Grup (
                                            {needsReminder.length} mention)
                                        </>
                                    )}
                                </button>
                            </div>

                            {/* Preview */}
                            {showPreview && groupPreview && (
                                <div className="bg-gradient-to-br from-purple-50 to-pink-50 p-6 rounded-lg border-2 border-purple-200">
                                    <div className="flex items-start justify-between mb-3">
                                        <h3 className="font-bold text-lg text-gray-800 flex items-center gap-2">
                                            <MessageSquare className="w-5 h-5 text-purple-600" />
                                            Preview Pesan Grup
                                        </h3>
                                        <button
                                            onClick={() =>
                                                setShowPreview(false)
                                            }
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            ✕
                                        </button>
                                    </div>
                                    <div className="bg-white p-4 rounded-lg whitespace-pre-wrap font-mono text-sm border border-gray-200 max-h-96 overflow-y-auto">
                                        {groupPreview}
                                    </div>
                                    <p className="text-xs text-gray-600 mt-2">
                                        💡 Setiap @628xxx akan otomatis mention
                                        nomor tersebut di grup
                                    </p>
                                </div>
                            )}

                            {/* Cara Dapatkan Group ID */}
                            <div className="bg-blue-50 p-6 rounded-lg border border-blue-200">
                                <h4 className="font-bold text-blue-900 mb-3">
                                    📱 Cara Mendapatkan Group ID WhatsApp
                                </h4>
                                <ol className="space-y-2 text-sm text-gray-700">
                                    <li className="flex gap-2">
                                        <span className="font-bold text-blue-600">
                                            1.
                                        </span>
                                        <div>
                                            <strong>
                                                Via Fonnte Dashboard:
                                            </strong>
                                            <p className="text-gray-600">
                                                Login ke Fonnte → Devices → Klik
                                                device Anda → Lihat daftar grup
                                            </p>
                                        </div>
                                    </li>
                                    <li className="flex gap-2">
                                        <span className="font-bold text-blue-600">
                                            2.
                                        </span>
                                        <div>
                                            <strong>Via API Test:</strong>
                                            <pre className="bg-gray-800 text-green-400 p-2 rounded mt-1 text-xs overflow-x-auto">
                                                curl -X POST
                                                https://api.fonnte.com/get-devices
                                                \<br />
                                                -H "Authorization: YOUR_TOKEN"
                                            </pre>
                                        </div>
                                    </li>
                                    <li className="flex gap-2">
                                        <span className="font-bold text-blue-600">
                                            3.
                                        </span>
                                        <div>
                                            <strong>Format Group ID:</strong>
                                            <p className="text-gray-600">
                                                628xxxxxxxxxx-xxxxxxxxx@g.us
                                            </p>
                                            <p className="text-xs text-gray-500 mt-1">
                                                Contoh:
                                                628123456789-1234567890@g.us
                                            </p>
                                        </div>
                                    </li>
                                </ol>
                            </div>

                            {/* Info Siswa */}
                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h4 className="font-semibold text-gray-800 mb-2">
                                    Siswa yang akan di-mention:{' '}
                                    {needsReminder.length}
                                </h4>
                                {needsReminder.length > 0 ? (
                                    <div className="text-sm text-gray-600 space-y-1">
                                        {needsReminder
                                            .slice(0, 5)
                                            .map((item) => (
                                                <div key={item.student._id}>
                                                    • {item.student.name} -{' '}
                                                    {item.weeksLate} minggu (Rp{' '}
                                                    {item.amountOwed.toLocaleString(
                                                        'id-ID'
                                                    )}
                                                    )
                                                </div>
                                            ))}
                                        {needsReminder.length > 5 && (
                                            <div className="text-gray-500 italic">
                                                ... dan{' '}
                                                {needsReminder.length - 5} siswa
                                                lainnya
                                            </div>
                                        )}
                                    </div>
                                ) : (
                                    <p className="text-gray-500 italic">
                                        Tidak ada siswa yang perlu diingatkan
                                    </p>
                                )}
                            </div>
                        </div>
                    )}

                    {activeTab === 'event' && (
                        <div className="space-y-6">
                            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border-2 border-blue-200">
                                <h3 className="font-bold text-lg mb-3 text-blue-900 flex items-center gap-2">
                                    <Calendar className="w-6 h-6" />
                                    Reminder Pembayaran Event
                                </h3>
                                <p className="text-gray-700 mb-2">
                                    Kirim reminder khusus untuk pembayaran event
                                    (bukan kas mingguan).
                                </p>
                                <div className="bg-white/70 p-3 rounded border border-blue-200">
                                    <p className="text-sm text-gray-700">
                                        <strong>Fitur:</strong>
                                    </p>
                                    <ul className="text-sm text-gray-700 ml-4 mt-2 space-y-1">
                                        <li>
                                            • Kirim reminder per event dengan
                                            deadline
                                        </li>
                                        <li>
                                            • Tracking progress pembayaran event
                                        </li>
                                        <li>
                                            • Pesan khusus untuk event (bukan
                                            kas rutin)
                                        </li>
                                        <li>• Kirim individual atau grup</li>
                                    </ul>
                                </div>
                            </div>

                            {/* Event Selection */}
                            <div className="bg-white p-4 rounded-lg border">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Pilih Event
                                </label>
                                <select
                                    value={selectedEvent?._id || ''}
                                    onChange={(e) =>
                                        handleEventSelect(e.target.value)
                                    }
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                                >
                                    <option value="">-- Pilih Event --</option>
                                    {events.map((event) => (
                                        <option
                                            key={event._id}
                                            value={event._id}
                                        >
                                            {event.name} - Rp{' '}
                                            {event.perStudentAmount.toLocaleString(
                                                'id-ID'
                                            )}
                                            (Deadline:{' '}
                                            {new Date(
                                                event.endDate
                                            ).toLocaleDateString('id-ID')}
                                            )
                                        </option>
                                    ))}
                                </select>
                            </div>

                            {selectedEvent && (
                                <>
                                    {/* Event Info */}
                                    <div className="bg-gradient-to-r from-green-50 to-teal-50 p-4 rounded-lg border">
                                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                            <div>
                                                <p className="text-sm text-gray-600">
                                                    Target Total
                                                </p>
                                                <p className="text-xl font-bold text-gray-800">
                                                    Rp{' '}
                                                    {selectedEvent.targetAmount.toLocaleString(
                                                        'id-ID'
                                                    )}
                                                </p>
                                            </div>
                                            <div>
                                                <p className="text-sm text-gray-600">
                                                    Per Siswa
                                                </p>
                                                <p className="text-xl font-bold text-gray-800">
                                                    Rp{' '}
                                                    {selectedEvent.perStudentAmount.toLocaleString(
                                                        'id-ID'
                                                    )}
                                                </p>
                                            </div>
                                            <div>
                                                <p className="text-sm text-gray-600">
                                                    Sudah Bayar
                                                </p>
                                                <p className="text-xl font-bold text-green-600">
                                                    {
                                                        selectedEvent
                                                            .studentsPaid.length
                                                    }{' '}
                                                    siswa
                                                </p>
                                            </div>
                                        </div>
                                        <div className="mt-3">
                                            <div className="flex justify-between text-sm text-gray-600 mb-1">
                                                <span>Progress</span>
                                                <span>
                                                    {selectedEvent.studentsPaid
                                                        .length > 0
                                                        ? Math.round(
                                                              ((selectedEvent
                                                                  .studentsPaid
                                                                  .length *
                                                                  selectedEvent.perStudentAmount) /
                                                                  selectedEvent.targetAmount) *
                                                                  100
                                                          )
                                                        : 0}
                                                    %
                                                </span>
                                            </div>
                                            <div className="w-full bg-gray-200 rounded-full h-2">
                                                <div
                                                    className="bg-green-600 h-2 rounded-full transition-all"
                                                    style={{
                                                        width: `${
                                                            selectedEvent
                                                                .studentsPaid
                                                                .length > 0
                                                                ? Math.min(
                                                                      ((selectedEvent
                                                                          .studentsPaid
                                                                          .length *
                                                                          selectedEvent.perStudentAmount) /
                                                                          selectedEvent.targetAmount) *
                                                                          100,
                                                                      100
                                                                  )
                                                                : 0
                                                        }%`,
                                                    }}
                                                />
                                            </div>
                                        </div>
                                    </div>

                                    {/* Message Category */}
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            Pilih Style Pesan
                                        </label>
                                        <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                                            {eventCategories.map((cat) => (
                                                <button
                                                    key={cat.value}
                                                    onClick={() =>
                                                        setEventCategory(
                                                            cat.value
                                                        )
                                                    }
                                                    className={`p-3 rounded-lg border-2 text-center transition-all ${
                                                        eventCategory ===
                                                        cat.value
                                                            ? `border-${cat.color}-500 bg-${cat.color}-50`
                                                            : 'border-gray-200 hover:border-gray-300'
                                                    }`}
                                                >
                                                    <div className="text-sm font-medium">
                                                        {cat.label}
                                                    </div>
                                                </button>
                                            ))}
                                        </div>
                                    </div>

                                    {/* Unpaid Students List */}
                                    <div className="bg-white rounded-lg border">
                                        <div className="p-4 border-b flex justify-between items-center">
                                            <h4 className="font-semibold text-gray-800">
                                                Siswa yang Belum Bayar (
                                                {eventUnpaidStudents.length})
                                            </h4>
                                            <div className="flex gap-2">
                                                <button
                                                    onClick={() => {
                                                        if (
                                                            selectedEventStudents.length ===
                                                            eventUnpaidStudents.length
                                                        ) {
                                                            setSelectedEventStudents(
                                                                []
                                                            );
                                                        } else {
                                                            setSelectedEventStudents(
                                                                eventUnpaidStudents.map(
                                                                    (s) => s._id
                                                                )
                                                            );
                                                        }
                                                    }}
                                                    className="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded"
                                                >
                                                    {selectedEventStudents.length ===
                                                    eventUnpaidStudents.length
                                                        ? 'Unselect All'
                                                        : 'Select All'}
                                                </button>
                                            </div>
                                        </div>
                                        <div className="p-4">
                                            {eventUnpaidStudents.length ===
                                            0 ? (
                                                <div className="text-center py-8 text-gray-500">
                                                    <CheckCircle className="w-12 h-12 mx-auto mb-2 text-green-500" />
                                                    <p>
                                                        Semua siswa sudah bayar!
                                                        🎉
                                                    </p>
                                                </div>
                                            ) : (
                                                <div className="space-y-2 max-h-96 overflow-y-auto">
                                                    {eventUnpaidStudents.map(
                                                        (student) => (
                                                            <div
                                                                key={
                                                                    student._id
                                                                }
                                                                className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100"
                                                            >
                                                                <div className="flex items-center gap-3">
                                                                    <input
                                                                        type="checkbox"
                                                                        checked={selectedEventStudents.includes(
                                                                            student._id
                                                                        )}
                                                                        onChange={(
                                                                            e
                                                                        ) => {
                                                                            if (
                                                                                e
                                                                                    .target
                                                                                    .checked
                                                                            ) {
                                                                                setSelectedEventStudents(
                                                                                    [
                                                                                        ...selectedEventStudents,
                                                                                        student._id,
                                                                                    ]
                                                                                );
                                                                            } else {
                                                                                setSelectedEventStudents(
                                                                                    selectedEventStudents.filter(
                                                                                        (
                                                                                            id
                                                                                        ) =>
                                                                                            id !==
                                                                                            student._id
                                                                                    )
                                                                                );
                                                                            }
                                                                        }}
                                                                        className="w-4 h-4"
                                                                    />
                                                                    <div>
                                                                        <p className="font-medium text-gray-800">
                                                                            {
                                                                                student.name
                                                                            }
                                                                        </p>
                                                                        <p className="text-sm text-gray-600">
                                                                            {
                                                                                student.phoneNumber
                                                                            }
                                                                        </p>
                                                                    </div>
                                                                </div>
                                                                <button
                                                                    onClick={() =>
                                                                        handleSendEventReminder(
                                                                            student._id
                                                                        )
                                                                    }
                                                                    disabled={
                                                                        sending
                                                                    }
                                                                    className="flex items-center gap-2 px-3 py-1 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300"
                                                                >
                                                                    <Send className="w-4 h-4" />
                                                                    Kirim
                                                                </button>
                                                            </div>
                                                        )
                                                    )}
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    {/* Action Buttons */}
                                    {eventUnpaidStudents.length > 0 && (
                                        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                                            <button
                                                onClick={
                                                    handlePreviewEventReminder
                                                }
                                                disabled={loading}
                                                className="flex items-center justify-center gap-2 px-4 py-3 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                                            >
                                                <Eye className="w-5 h-5" />
                                                Preview Pesan
                                            </button>

                                            <button
                                                onClick={handleSendEventBulk}
                                                disabled={
                                                    sending ||
                                                    eventUnpaidStudents.length ===
                                                        0
                                                }
                                                className="flex items-center justify-center gap-2 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 transition-colors"
                                            >
                                                <Send className="w-5 h-5" />
                                                {sending
                                                    ? 'Mengirim...'
                                                    : selectedEventStudents.length >
                                                      0
                                                    ? `Kirim ke ${selectedEventStudents.length} Siswa`
                                                    : `Kirim ke Semua (${eventUnpaidStudents.length})`}
                                            </button>

                                            <button
                                                onClick={() =>
                                                    setShowGroupModal(true)
                                                }
                                                disabled={sending}
                                                className="flex items-center justify-center gap-2 px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-300 transition-colors"
                                            >
                                                <Users className="w-5 h-5" />
                                                Kirim ke Grup WA
                                            </button>
                                        </div>
                                    )}

                                    {/* Group Modal for Event */}
                                    {showGroupModal && (
                                        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                                            <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                                                <div className="p-6">
                                                    <h3 className="text-xl font-bold mb-4">
                                                        Kirim Event Reminder ke
                                                        Grup WhatsApp
                                                    </h3>

                                                    <div className="space-y-4">
                                                        <div>
                                                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                                                Group ID
                                                                WhatsApp
                                                            </label>
                                                            <input
                                                                type="text"
                                                                value={groupId}
                                                                onChange={(e) =>
                                                                    setGroupId(
                                                                        e.target
                                                                            .value
                                                                    )
                                                                }
                                                                placeholder="628xxxxxxxxxx-xxxxxxxxx@g.us"
                                                                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                                                            />
                                                        </div>

                                                        <div>
                                                            <button
                                                                onClick={
                                                                    handlePreviewEventGroup
                                                                }
                                                                disabled={
                                                                    loading
                                                                }
                                                                className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg"
                                                            >
                                                                <Eye className="w-4 h-4" />
                                                                Preview Pesan
                                                                Grup
                                                            </button>
                                                        </div>

                                                        {groupPreview && (
                                                            <div className="bg-gray-50 p-4 rounded-lg">
                                                                <p className="text-sm font-medium text-gray-700 mb-2">
                                                                    Preview:
                                                                </p>
                                                                <pre className="text-sm whitespace-pre-wrap text-gray-800">
                                                                    {
                                                                        groupPreview
                                                                    }
                                                                </pre>
                                                            </div>
                                                        )}

                                                        <div className="flex gap-3">
                                                            <button
                                                                onClick={() => {
                                                                    setShowGroupModal(
                                                                        false
                                                                    );
                                                                    setGroupPreview(
                                                                        ''
                                                                    );
                                                                }}
                                                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
                                                            >
                                                                Batal
                                                            </button>
                                                            <button
                                                                onClick={
                                                                    handleSendEventToGroup
                                                                }
                                                                disabled={
                                                                    sending ||
                                                                    !groupId.trim()
                                                                }
                                                                className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-300"
                                                            >
                                                                {sending
                                                                    ? 'Mengirim...'
                                                                    : 'Kirim ke Grup'}
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </>
                            )}
                        </div>
                    )}

                    {activeTab === 'history' && (
                        <div className="space-y-3">
                            <h3 className="font-bold text-lg mb-3">
                                Riwayat Notifikasi
                            </h3>

                            {notifications.length === 0 ? (
                                <div className="text-center py-12 bg-gray-50 rounded-lg">
                                    <Clock className="w-16 h-16 text-gray-400 mx-auto mb-3" />
                                    <p className="text-gray-600">
                                        Belum ada notifikasi terkirim
                                    </p>
                                </div>
                            ) : (
                                <div className="space-y-2">
                                    {notifications.slice(0, 20).map((notif) => (
                                        <div
                                            key={notif._id}
                                            className="bg-white p-4 rounded-lg border border-gray-200"
                                        >
                                            <div className="flex items-start justify-between mb-2">
                                                <div>
                                                    <p className="font-semibold text-gray-800">
                                                        {notif.studentId
                                                            ?.name || 'Unknown'}
                                                    </p>
                                                    <p className="text-sm text-gray-600">
                                                        📱 {notif.phoneNumber}
                                                    </p>
                                                </div>

                                                <span
                                                    className={`px-3 py-1 rounded-full text-xs font-medium ${
                                                        notif.status === 'sent'
                                                            ? 'bg-green-100 text-green-700'
                                                            : notif.status ===
                                                              'failed'
                                                            ? 'bg-red-100 text-red-700'
                                                            : 'bg-yellow-100 text-yellow-700'
                                                    }`}
                                                >
                                                    {notif.status}
                                                </span>
                                            </div>

                                            <p className="text-sm text-gray-700 bg-gray-50 p-3 rounded whitespace-pre-wrap border border-gray-200">
                                                {notif.message}
                                            </p>

                                            <p className="text-xs text-gray-500 mt-2">
                                                {new Date(
                                                    notif.createdAt
                                                ).toLocaleString('id-ID')}
                                                {notif.templateUsed &&
                                                    ` • Style: ${notif.templateUsed}`}
                                            </p>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    )}

                    {activeTab === 'settings' && (
                        <div className="space-y-6">
                            <div className="bg-blue-50 p-6 rounded-lg border border-blue-200">
                                <h3 className="font-bold text-lg mb-4 text-blue-900">
                                    🚀 Cara Setup WhatsApp Bot
                                </h3>

                                <div className="space-y-3 text-sm text-gray-700">
                                    <div>
                                        <p className="font-semibold mb-2">
                                            1. Daftar di Fonnte
                                        </p>
                                        <p className="ml-4">
                                            • Buka{' '}
                                            <a
                                                href="https://fonnte.com"
                                                target="_blank"
                                                className="text-blue-600 underline"
                                            >
                                                https://fonnte.com
                                            </a>
                                        </p>
                                        <p className="ml-4">
                                            • Daftar akun baru (gratis)
                                        </p>
                                        <p className="ml-4">
                                            • Login dan connect WhatsApp
                                        </p>
                                    </div>

                                    <div>
                                        <p className="font-semibold mb-2">
                                            2. Dapatkan API Token
                                        </p>
                                        <p className="ml-4">
                                            • Masuk ke dashboard Fonnte
                                        </p>
                                        <p className="ml-4">
                                            • Copy API Token Anda
                                        </p>
                                    </div>

                                    <div>
                                        <p className="font-semibold mb-2">
                                            3. Set di File .env
                                        </p>
                                        <pre className="ml-4 bg-gray-800 text-green-400 p-3 rounded mt-2 font-mono text-xs overflow-x-auto">
                                            {`FONNTE_API_TOKEN=your_token_here
WA_TEST_MODE=false
AUTO_REMINDER_ENABLED=true`}
                                        </pre>
                                    </div>

                                    <div>
                                        <p className="font-semibold mb-2">
                                            4. Tambahkan Nomor WA Siswa
                                        </p>
                                        <p className="ml-4">
                                            • Masuk ke menu Manajemen Siswa
                                        </p>
                                        <p className="ml-4">
                                            • Edit data siswa dan tambahkan
                                            nomor WhatsApp
                                        </p>
                                        <p className="ml-4">
                                            • Format: 08xxx atau 628xxx
                                        </p>
                                    </div>

                                    <div>
                                        <p className="font-semibold mb-2">
                                            5. Test Mode
                                        </p>
                                        <p className="ml-4">
                                            • Set WA_TEST_MODE=true untuk
                                            testing tanpa kirim real
                                        </p>
                                        <p className="ml-4">
                                            • Pesan akan muncul di console log
                                            server
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <div className="bg-yellow-50 p-6 rounded-lg border border-yellow-200">
                                <h3 className="font-bold text-lg mb-3 text-yellow-900">
                                    ⏰ Auto-Reminder Schedule
                                </h3>
                                <ul className="space-y-2 text-sm text-gray-700">
                                    <li>
                                        • <strong>Senin 07:00</strong> -
                                        Reminder ke siswa telat ≥ 1 minggu
                                    </li>
                                    <li>
                                        • <strong>Jumat 15:00</strong> -
                                        Reminder ke siswa telat ≥ 2 minggu
                                    </li>
                                    <li>
                                        • <strong>Setiap hari 10:00</strong> -
                                        Reminder urgent (≥ 4 minggu)
                                    </li>
                                </ul>
                                <p className="mt-3 text-xs text-gray-600">
                                    * Aktifkan dengan set
                                    AUTO_REMINDER_ENABLED=true di .env
                                </p>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default NotificationManager;


components/Settings.jsx
import React, { useState, useEffect } from 'react';
import {
    Settings as SettingsIcon,
    Save,
    Calendar,
    DollarSign,
    RefreshCw,
} from 'lucide-react';
import { settingsAPI } from '../services/api';

const Settings = ({ onStartDateChange, currentStartDate }) => {
    const [startDate, setStartDate] = useState('');
    const [weeklyAmount, setWeeklyAmount] = useState(2000);
    const [lateThreshold, setLateThreshold] = useState(4);
    const [className, setClassName] = useState('');
    const [loading, setLoading] = useState(false);
    const [success, setSuccess] = useState('');
    const [error, setError] = useState('');

    useEffect(() => {
        loadSettings();
    }, []);

    useEffect(() => {
        if (currentStartDate) {
            setStartDate(formatDateForInput(currentStartDate));
        }
    }, [currentStartDate]);

    const formatDateForInput = (date) => {
        const d = new Date(date);
        const year = d.getFullYear();
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    };

    const loadSettings = async () => {
        setLoading(true);
        try {
            // Load all settings
            const [startDateRes, amountRes, thresholdRes, classNameRes] =
                await Promise.all([
                    settingsAPI.get('start_date').catch(() => null),
                    settingsAPI.get('weekly_amount').catch(() => null),
                    settingsAPI.get('late_threshold').catch(() => null),
                    settingsAPI.get('class_name').catch(() => null),
                ]);

            if (startDateRes?.data?.value) {
                setStartDate(formatDateForInput(startDateRes.data.value));
            }
            if (amountRes?.data?.value) {
                setWeeklyAmount(amountRes.data.value);
            }
            if (thresholdRes?.data?.value) {
                setLateThreshold(thresholdRes.data.value);
            }
            if (classNameRes?.data?.value) {
                setClassName(classNameRes.data.value);
            }
        } catch (err) {
            console.log('Using default settings');
        } finally {
            setLoading(false);
        }
    };

    const handleSave = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError('');
        setSuccess('');

        try {
            // Save all settings
            await Promise.all([
                settingsAPI.set('start_date', startDate),
                settingsAPI.set('weekly_amount', weeklyAmount),
                settingsAPI.set('late_threshold', lateThreshold),
                settingsAPI.set('class_name', className),
            ]);

            // Notify parent component about start date change
            if (onStartDateChange) {
                onStartDateChange(new Date(startDate));
            }

            setSuccess('✅ Pengaturan berhasil disimpan!');

            // Auto hide success message after 3 seconds
            setTimeout(() => setSuccess(''), 3000);
        } catch (err) {
            setError('❌ Gagal menyimpan pengaturan: ' + err.message);
        } finally {
            setLoading(false);
        }
    };

    const handleReset = () => {
        if (window.confirm('Reset ke pengaturan default?')) {
            setStartDate('2025-10-27');
            setWeeklyAmount(2000);
            setLateThreshold(4);
            setClassName('');
        }
    };

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center gap-3">
                    <div className="bg-indigo-600 p-3 rounded-lg">
                        <SettingsIcon className="w-6 h-6 text-white" />
                    </div>
                    <div>
                        <h2 className="text-2xl font-bold text-gray-800">
                            Pengaturan Sistem
                        </h2>
                        <p className="text-gray-500">
                            Konfigurasi sistem kas kelas
                        </p>
                    </div>
                </div>
            </div>

            {/* Success & Error Messages */}
            {success && (
                <div className="bg-green-50 border-l-4 border-green-400 p-4 rounded">
                    <p className="text-green-800">{success}</p>
                </div>
            )}

            {error && (
                <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded">
                    <p className="text-red-800">{error}</p>
                </div>
            )}

            {/* Settings Form */}
            <form onSubmit={handleSave} className="bg-white rounded-lg shadow">
                <div className="p-6 space-y-6">
                    {/* Class Name */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            Nama Kelas
                        </label>
                        <input
                            type="text"
                            value={className}
                            onChange={(e) => setClassName(e.target.value)}
                            placeholder="Contoh: XII IPA 1"
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        />
                        <p className="text-xs text-gray-500 mt-1">
                            Akan ditampilkan di header aplikasi
                        </p>
                    </div>

                    {/* Start Date */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            <Calendar className="w-4 h-4 inline mr-1" />
                            Tanggal Mulai Pembayaran
                        </label>
                        <input
                            type="date"
                            value={startDate}
                            onChange={(e) => setStartDate(e.target.value)}
                            required
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        />
                        <p className="text-xs text-gray-500 mt-1">
                            Tanggal mulai perhitungan minggu pertama
                        </p>
                    </div>

                    {/* Weekly Amount */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            <DollarSign className="w-4 h-4 inline mr-1" />
                            Jumlah Kas Per Minggu
                        </label>
                        <div className="flex items-center gap-2">
                            <span className="text-gray-600">Rp</span>
                            <input
                                type="number"
                                value={weeklyAmount}
                                onChange={(e) =>
                                    setWeeklyAmount(parseInt(e.target.value))
                                }
                                min="1000"
                                step="500"
                                required
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                            />
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                            Jumlah uang kas yang harus dibayar setiap minggu
                        </p>
                    </div>

                    {/* Late Threshold */}
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            Batas Keterlambatan (Minggu)
                        </label>
                        <input
                            type="number"
                            value={lateThreshold}
                            onChange={(e) =>
                                setLateThreshold(parseInt(e.target.value))
                            }
                            min="1"
                            max="12"
                            required
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        />
                        <p className="text-xs text-gray-500 mt-1">
                            Siswa akan mendapat status "TELAT" jika tunggakan ≥{' '}
                            {lateThreshold} minggu (Rp{' '}
                            {(lateThreshold * weeklyAmount).toLocaleString(
                                'id-ID'
                            )}
                            )
                        </p>
                    </div>

                    {/* Preview Section */}
                    <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                        <h3 className="font-semibold text-gray-800 mb-3">
                            Preview Perhitungan:
                        </h3>
                        <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                                <span className="text-gray-600">
                                    Kas per minggu:
                                </span>
                                <span className="font-semibold">
                                    Rp {weeklyAmount.toLocaleString('id-ID')}
                                </span>
                            </div>
                            <div className="flex justify-between">
                                <span className="text-gray-600">
                                    Kas per bulan (4 minggu):
                                </span>
                                <span className="font-semibold">
                                    Rp{' '}
                                    {(weeklyAmount * 4).toLocaleString('id-ID')}
                                </span>
                            </div>
                            <div className="flex justify-between">
                                <span className="text-gray-600">
                                    Batas telat:
                                </span>
                                <span className="font-semibold text-red-600">
                                    Rp{' '}
                                    {(
                                        lateThreshold * weeklyAmount
                                    ).toLocaleString('id-ID')}
                                </span>
                            </div>
                            {startDate && (
                                <div className="flex justify-between">
                                    <span className="text-gray-600">
                                        Tanggal mulai:
                                    </span>
                                    <span className="font-semibold">
                                        {new Date(startDate).toLocaleDateString(
                                            'id-ID',
                                            {
                                                weekday: 'long',
                                                year: 'numeric',
                                                month: 'long',
                                                day: 'numeric',
                                            }
                                        )}
                                    </span>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                {/* Action Buttons */}
                <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-between rounded-b-lg">
                    <button
                        type="button"
                        onClick={handleReset}
                        className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition flex items-center gap-2"
                    >
                        <RefreshCw className="w-4 h-4" />
                        Reset Default
                    </button>
                    <button
                        type="submit"
                        disabled={loading}
                        className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition flex items-center gap-2 disabled:opacity-50"
                    >
                        {loading ? (
                            <>
                                <RefreshCw className="w-4 h-4 animate-spin" />
                                Menyimpan...
                            </>
                        ) : (
                            <>
                                <Save className="w-4 h-4" />
                                Simpan Pengaturan
                            </>
                        )}
                    </button>
                </div>
            </form>

            {/* Info Box */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-semibold text-blue-900 mb-2">
                    ℹ️ Informasi Penting:
                </h4>
                <ul className="text-sm text-blue-800 space-y-1 list-disc list-inside">
                    <li>
                        Perubahan tanggal mulai akan mempengaruhi perhitungan
                        tunggakan semua siswa
                    </li>
                    <li>
                        Jumlah kas per minggu akan digunakan untuk perhitungan
                        otomatis
                    </li>
                    <li>
                        Batas keterlambatan menentukan kapan status "TELAT"
                        muncul
                    </li>
                    <li>
                        Refresh halaman setelah menyimpan untuk melihat
                        perubahan
                    </li>
                </ul>
            </div>
        </div>
    );
};

export default Settings;


services/api.js
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const api = axios.create({
    baseURL: API_URL,
    headers: {
        'Content-Type': 'application/json',
    },
});

// Students API
export const studentsAPI = {
    getAll: () => api.get('/students'),
    getOne: (id) => api.get(`/students/${id}`),
    create: (data) => api.post('/students', data),
    update: (id, data) => api.patch(`/students/${id}`, data),
    delete: (id) => api.delete(`/students/${id}`),
};

// Payments API
export const paymentsAPI = {
    getAll: () => api.get('/payments'),
    getByStudent: (studentId) => api.get(`/payments/student/${studentId}`),
    create: (data) => api.post('/payments', data),
    delete: (id) => api.delete(`/payments/${id}`),
    getTotalByStudent: (studentId) => api.get(`/payments/total/${studentId}`),
};

// Expenses API
export const expensesAPI = {
    getAll: () => api.get('/expenses'),
    create: (data) => api.post('/expenses', data),
    delete: (id) => api.delete(`/expenses/${id}`),
};

// Settings API
export const settingsAPI = {
    get: (key) => api.get(`/settings/${key}`),
    set: (key, value) => api.post('/settings', { key, value }),
    getAll: () => api.get('/settings'),
};

// ===== TAMBAHKAN INI: Events API =====
export const eventsAPI = {
    getAll: () => api.get('/events'),
    getOne: (id) => api.get(`/events/${id}`),
    create: (data) => api.post('/events', data),
    update: (id, data) => api.patch(`/events/${id}`, data),
    delete: (id) => api.delete(`/events/${id}`),
    complete: (id) => api.post(`/events/${id}/complete`),
};

// ===== TAMBAHKAN INI: Event Payments API =====
export const eventPaymentsAPI = {
    getByEvent: (eventId) => api.get(`/events/${eventId}/payments`),
    create: (eventId, data) => api.post(`/events/${eventId}/payments`, data),
    delete: (eventId, paymentId) =>
        api.delete(`/events/${eventId}/payments/${paymentId}`),
};

// ===== TAMBAHKAN INI: Notifications API =====
export const notificationsAPI = {
    getAll: () => api.get('/notifications'),
    getByStudent: (studentId) => api.get(`/notifications/student/${studentId}`),
    getNeedsReminder: (minWeeks) =>
        api.get(`/notifications/needs-reminder?minWeeks=${minWeeks}`),
    sendReminder: (studentId, data) =>
        api.post(`/notifications/send-reminder/${studentId}`, data),
    sendBulkReminder: (data) =>
        api.post('/notifications/send-bulk-reminder', data),
    sendThankYou: (studentId) =>
        api.post(`/notifications/send-thank-you/${studentId}`),
    sendCustom: (data) => api.post('/notifications/send-custom', data),
    sendToGroup: (data) => api.post('/notifications/send-to-group', data),
    preview: (data) => api.post('/notifications/preview', data),
    previewGroup: (data) => api.post('/notifications/preview-group', data),
    // Event reminder endpoints
    sendEventReminder: (studentId, eventId, data) =>
        api.post(
            `/notifications/send-event-reminder/${studentId}/${eventId}`,
            data
        ),
    sendEventReminderBulk: (eventId, data) =>
        api.post(`/notifications/send-event-reminder-bulk/${eventId}`, data),
    sendEventReminderGroup: (eventId, data) =>
        api.post(`/notifications/send-event-reminder-group/${eventId}`, data),
    previewEventReminder: (eventId, data) =>
        api.post(`/notifications/preview-event-reminder/${eventId}`, data),
    getStatus: () => api.get('/notifications/status'),
    getStats: () => api.get('/notifications/stats'),
};

export default api;





//// SERVER ////

models/Event.js
import mongoose from 'mongoose';

const eventSchema = new mongoose.Schema(
    {
        name: {
            type: String,
            required: true,
            trim: true,
        },
        description: {
            type: String,
            trim: true,
        },
        targetAmount: {
            type: Number,
            required: true,
            min: 0,
        },
        perStudentAmount: {
            type: Number,
            required: true,
            min: 0,
        },
        startDate: {
            type: Date,
            required: true,
        },
        endDate: {
            type: Date,
            required: true,
        },
        status: {
            type: String,
            enum: ['aktif', 'selesai', 'dibatalkan'],
            default: 'aktif',
        },
        totalCollected: {
            type: Number,
            default: 0,
        },
        studentsPaid: [
            {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Student',
            },
        ],
        isCompleted: {
            type: Boolean,
            default: false,
        },
        completedAt: {
            type: Date,
        },
        surplusTransferred: {
            type: Boolean,
            default: false,
        },
    },
    {
        timestamps: true,
    }
);

// Method untuk cek apakah event sudah selesai
eventSchema.methods.checkCompletion = function () {
    const totalStudents = this.studentsPaid.length;
    const expectedTotal = this.perStudentAmount * totalStudents;

    return {
        isComplete: this.totalCollected >= this.targetAmount,
        totalCollected: this.totalCollected,
        targetAmount: this.targetAmount,
        surplus: this.totalCollected - this.targetAmount,
        percentComplete: (this.totalCollected / this.targetAmount) * 100,
    };
};

export default mongoose.model('Event', eventSchema);


models/EventPayment.js
import mongoose from 'mongoose';

const eventPaymentSchema = new mongoose.Schema(
    {
        eventId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Event',
            required: true,
        },
        studentId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Student',
            required: true,
        },
        amount: {
            type: Number,
            required: true,
            min: 0,
        },
        date: {
            type: Date,
            default: Date.now,
        },
        method: {
            type: String,
            enum: ['Tunai', 'Transfer'],
            default: 'Tunai',
        },
        note: {
            type: String,
            trim: true,
        },
    },
    {
        timestamps: true,
    }
);

export default mongoose.model('EventPayment', eventPaymentSchema);


models/Expense.js
import mongoose from 'mongoose';

const expenseSchema = new mongoose.Schema(
    {
        purpose: {
            type: String,
            required: true,
            trim: true,
        },
        amount: {
            type: Number,
            required: true,
        },
        date: {
            type: Date,
            required: true,
            default: Date.now,
        },
        category: {
            type: String,
            enum: ['Kebersihan', 'Acara', 'Perlengkapan', 'Lain-lain'],
            required: true,
        },
        approvedBy: {
            type: String,
            required: true,
            trim: true,
        },
    },
    {
        timestamps: true,
    }
);

export default mongoose.model('Expense', expenseSchema);


models/Notification.js
import mongoose from 'mongoose';

const notificationSchema = new mongoose.Schema(
    {
        studentId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Student',
            required: false, // Not required for group messages
        },
        phoneNumber: {
            type: String,
            required: true,
        },
        message: {
            type: String,
            required: true,
        },
        type: {
            type: String,
            enum: [
                'payment_reminder',
                'event_reminder',
                'thank_you',
                'late_payment',
                'custom',
                'group_reminder',
            ],
            default: 'payment_reminder',
        },
        status: {
            type: String,
            enum: ['pending', 'sent', 'failed', 'delivered', 'read'],
            default: 'pending',
        },
        sentAt: {
            type: Date,
        },
        deliveredAt: {
            type: Date,
        },
        failureReason: {
            type: String,
        },
        weekNumber: {
            type: Number,
        },
        tunggakan: {
            type: Number,
        },
        templateUsed: {
            type: String,
        },
    },
    {
        timestamps: true,
    }
);

// Index untuk query cepat
notificationSchema.index({ studentId: 1, createdAt: -1 });
notificationSchema.index({ status: 1 });
notificationSchema.index({ type: 1 });

export default mongoose.model('Notification', notificationSchema);


models/Payment.js
import mongoose from 'mongoose';

const paymentSchema = new mongoose.Schema(
    {
        studentId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Student',
            required: false, // UBAH ke false karena bisa null untuk custom payment
        },
        amount: {
            type: Number,
            required: true,
            default: 2000,
        },
        date: {
            type: Date,
            required: true,
            default: Date.now,
        },
        week: {
            type: Number,
        },
        method: {
            type: String,
            enum: ['Tunai', 'Transfer'],
            default: 'Tunai',
        },
        note: {
            type: String,
            trim: true,
        },
        // ===== TAMBAHKAN FIELD BARU INI =====
        source: {
            type: String,
            enum: ['regular', 'event', 'custom'],
            default: 'regular',
        },
        sourceName: {
            type: String,
            trim: true,
        },
    },
    {
        timestamps: true,
    }
);

export default mongoose.model('Payment', paymentSchema);


models/Seting.js
import mongoose from 'mongoose';

const settingSchema = new mongoose.Schema(
    {
        key: {
            type: String,
            required: true,
            unique: true,
        },
        value: {
            type: mongoose.Schema.Types.Mixed,
            required: true,
        },
    },
    {
        timestamps: true,
    }
);

export default mongoose.model('Setting', settingSchema);


models/Student.js
import mongoose from 'mongoose';

const studentSchema = new mongoose.Schema(
    {
        name: {
            type: String,
            required: true,
            trim: true,
        },
        absen: {
            type: Number,
            required: true,
            unique: true,
        },
        status: {
            type: String,
            enum: ['Aktif', 'Tidak Aktif', 'Alumni'],
            default: 'Aktif',
        },
        phoneNumber: {
            type: String,
            trim: true,
            validate: {
                validator: function (v) {
                    // Validasi nomor WA Indonesia: 08xx atau 628xx
                    return !v || /^(08|628)\d{8,12}$/.test(v);
                },
                message: (props) =>
                    `${props.value} bukan format nomor WhatsApp yang valid!`,
            },
        },
        enableNotification: {
            type: Boolean,
            default: true,
        },
        lastNotificationSent: {
            type: Date,
        },
    },
    {
        timestamps: true,
    }
);

export default mongoose.model('Student', studentSchema);


routes/events.js
import mongoose from 'mongoose';

const studentSchema = new mongoose.Schema(
    {
        name: {
            type: String,
            required: true,
            trim: true,
        },
        absen: {
            type: Number,
            required: true,
            unique: true,
        },
        status: {
            type: String,
            enum: ['Aktif', 'Tidak Aktif', 'Alumni'],
            default: 'Aktif',
        },
        phoneNumber: {
            type: String,
            trim: true,
            validate: {
                validator: function (v) {
                    // Validasi nomor WA Indonesia: 08xx atau 628xx
                    return !v || /^(08|628)\d{8,12}$/.test(v);
                },
                message: (props) =>
                    `${props.value} bukan format nomor WhatsApp yang valid!`,
            },
        },
        enableNotification: {
            type: Boolean,
            default: true,
        },
        lastNotificationSent: {
            type: Date,
        },
    },
    {
        timestamps: true,
    }
);

export default mongoose.model('Student', studentSchema);


routes/expenses.js
import express from 'express';
import Expense from '../models/Expense.js';

const router = express.Router();

// Get all expenses
router.get('/', async (req, res) => {
    try {
        const expenses = await Expense.find().sort({ date: -1 });
        res.json(expenses);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Create expense
router.post('/', async (req, res) => {
    const expense = new Expense({
        purpose: req.body.purpose,
        amount: req.body.amount,
        date: req.body.date || new Date(),
        category: req.body.category,
        approvedBy: req.body.approvedBy,
    });

    try {
        const newExpense = await expense.save();
        res.status(201).json(newExpense);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Delete expense
router.delete('/:id', async (req, res) => {
    try {
        const expense = await Expense.findById(req.params.id);
        if (!expense) {
            return res.status(404).json({ message: 'Expense not found' });
        }
        await expense.deleteOne();
        res.json({ message: 'Expense deleted' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

export default router;


routes/notifications.js
import express from 'express';
import Expense from '../models/Expense.js';

const router = express.Router();

// Get all expenses
router.get('/', async (req, res) => {
    try {
        const expenses = await Expense.find().sort({ date: -1 });
        res.json(expenses);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Create expense
router.post('/', async (req, res) => {
    const expense = new Expense({
        purpose: req.body.purpose,
        amount: req.body.amount,
        date: req.body.date || new Date(),
        category: req.body.category,
        approvedBy: req.body.approvedBy,
    });

    try {
        const newExpense = await expense.save();
        res.status(201).json(newExpense);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Delete expense
router.delete('/:id', async (req, res) => {
    try {
        const expense = await Expense.findById(req.params.id);
        if (!expense) {
            return res.status(404).json({ message: 'Expense not found' });
        }
        await expense.deleteOne();
        res.json({ message: 'Expense deleted' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

export default router;


routes/payments.js
import express from 'express';
import Student from '../models/Student.js';
import Payment from '../models/Payment.js';
import Notification from '../models/Notification.js';
import whatsappService from '../services/whatsappService.js';

const router = express.Router();

// ==============================================
// 📊 GET ALL NOTIFICATIONS
// ==============================================
router.get('/', async (req, res) => {
    try {
        const notifications = await Notification.find()
            .populate('studentId', 'name absen phoneNumber')
            .sort({ createdAt: -1 })
            .limit(100);

        res.json(notifications);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 📱 GET NOTIFICATIONS BY STUDENT
// ==============================================
router.get('/student/:studentId', async (req, res) => {
    try {
        const notifications = await Notification.find({
            studentId: req.params.studentId,
        })
            .sort({ createdAt: -1 })
            .limit(50);

        res.json(notifications);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 🎯 GET STUDENTS WHO NEED REMINDER
// ==============================================
router.get('/needs-reminder', async (req, res) => {
    try {
        const { minWeeks = 1 } = req.query;

        // Get all active students
        const students = await Student.find({ status: 'Aktif' });

        // Get all payments
        const payments = await Payment.find();

        // Calculate students who need reminder
        const needsReminder = [];

        for (const student of students) {
            // Skip if no phone number or notification disabled
            if (!student.phoneNumber || !student.enableNotification) {
                continue;
            }

            // Calculate weeks late
            const studentPayments = payments.filter(
                (p) => p.studentId?.toString() === student._id.toString()
            );

            const totalPaid = studentPayments.reduce(
                (sum, p) => sum + p.amount,
                0
            );
            const weeksPaid = Math.floor(totalPaid / 2000);

            // Calculate current week
            const startDate = new Date(process.env.START_DATE || '2025-10-27');
            const now = new Date();
            const days = Math.floor((now - startDate) / (24 * 60 * 60 * 1000));
            const currentWeek = Math.max(0, Math.ceil(days / 7) + 1);

            const weeksLate = currentWeek - weeksPaid;
            const amountOwed = weeksLate * 2000;

            if (weeksLate >= minWeeks) {
                needsReminder.push({
                    student,
                    weeksLate,
                    amountOwed,
                    lastNotificationSent: student.lastNotificationSent,
                });
            }
        }

        res.json({
            total: needsReminder.length,
            students: needsReminder,
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 📤 SEND REMINDER TO ONE STUDENT
// ==============================================
router.post('/send-reminder/:studentId', async (req, res) => {
    try {
        const { category = 'friendly', weeksLate, amount } = req.body;

        const student = await Student.findById(req.params.studentId);

        if (!student) {
            return res.status(404).json({ error: 'Siswa tidak ditemukan' });
        }

        if (!student.phoneNumber) {
            return res.status(400).json({
                error: 'Siswa tidak memiliki nomor WhatsApp',
            });
        }

        // Send reminder
        const result = await whatsappService.sendPaymentReminder(
            student,
            weeksLate,
            amount,
            category
        );

        res.json({
            success: result.success,
            message: result.testMode
                ? 'Pesan berhasil dikirim (TEST MODE)'
                : 'Pesan berhasil dikirim',
            notification: result.notification,
            testMode: result.testMode,
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 📤 SEND REMINDER TO MULTIPLE STUDENTS
// ==============================================
router.post('/send-bulk-reminder', async (req, res) => {
    try {
        const {
            studentIds,
            category = 'friendly',
            minWeeks = 1,
            maxWeeks = null,
        } = req.body;

        const results = {
            success: [],
            failed: [],
            skipped: [],
        };

        // Get students
        let students;
        if (studentIds && studentIds.length > 0) {
            students = await Student.find({ _id: { $in: studentIds } });
        } else {
            // Send to all who need reminder
            students = await Student.find({
                status: 'Aktif',
                phoneNumber: { $exists: true, $ne: '' },
                enableNotification: true,
            });
        }

        // Get all payments for calculation
        const payments = await Payment.find();

        // Calculate current week
        const startDate = new Date(process.env.START_DATE || '2025-10-27');
        const now = new Date();
        const days = Math.floor((now - startDate) / (24 * 60 * 60 * 1000));
        const currentWeek = Math.max(0, Math.ceil(days / 7) + 1);

        // Send to each student
        for (const student of students) {
            try {
                // Calculate weeks late
                const studentPayments = payments.filter(
                    (p) => p.studentId?.toString() === student._id.toString()
                );

                const totalPaid = studentPayments.reduce(
                    (sum, p) => sum + p.amount,
                    0
                );
                const weeksPaid = Math.floor(totalPaid / 2000);
                const weeksLate = currentWeek - weeksPaid;
                const amountOwed = weeksLate * 2000;

                // Check if within range
                if (weeksLate < minWeeks) {
                    results.skipped.push({
                        student: student.name,
                        reason: 'Belum mencapai minimum weeks',
                    });
                    continue;
                }

                if (maxWeeks && weeksLate > maxWeeks) {
                    results.skipped.push({
                        student: student.name,
                        reason: 'Melebihi maximum weeks',
                    });
                    continue;
                }

                // Send reminder
                const result = await whatsappService.sendPaymentReminder(
                    student,
                    weeksLate,
                    amountOwed,
                    category
                );

                if (result.success) {
                    results.success.push({
                        student: student.name,
                        phone: student.phoneNumber,
                        weeksLate,
                        amount: amountOwed,
                        notificationId: result.notification._id,
                    });
                } else {
                    results.failed.push({
                        student: student.name,
                        phone: student.phoneNumber,
                        error: 'Gagal mengirim pesan',
                    });
                }

                // Delay to avoid rate limit
                await new Promise((resolve) => setTimeout(resolve, 1000));
            } catch (error) {
                results.failed.push({
                    student: student.name,
                    error: error.message,
                });
            }
        }

        res.json({
            message: 'Pengiriman selesai',
            summary: {
                total: students.length,
                success: results.success.length,
                failed: results.failed.length,
                skipped: results.skipped.length,
            },
            results,
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 💌 SEND THANK YOU MESSAGE
// ==============================================
router.post('/send-thank-you/:studentId', async (req, res) => {
    try {
        const student = await Student.findById(req.params.studentId);

        if (!student) {
            return res.status(404).json({ error: 'Siswa tidak ditemukan' });
        }

        const result = await whatsappService.sendThankYou(student);

        res.json({
            success: result.success,
            message: result.success
                ? 'Ucapan terima kasih berhasil dikirim'
                : 'Gagal mengirim ucapan terima kasih',
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// ✉️ SEND CUSTOM MESSAGE
// ==============================================
router.post('/send-custom', async (req, res) => {
    try {
        const { studentId, message } = req.body;

        if (!message) {
            return res.status(400).json({ error: 'Pesan tidak boleh kosong' });
        }

        const student = await Student.findById(studentId);

        if (!student) {
            return res.status(404).json({ error: 'Siswa tidak ditemukan' });
        }

        const result = await whatsappService.sendCustomMessage(
            student,
            message
        );

        res.json({
            success: result.success,
            message: result.success
                ? 'Pesan berhasil dikirim'
                : 'Gagal mengirim pesan',
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 🔍 PREVIEW MESSAGE
// ==============================================
router.post('/preview', async (req, res) => {
    try {
        const {
            category = 'friendly',
            studentName,
            weeksLate,
            amount,
        } = req.body;

        const message = whatsappService.generateReminderMessage(
            studentName || 'John Doe',
            weeksLate || 4,
            amount || 8000,
            category
        );

        res.json({
            message,
            category,
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// ✅ CHECK WHATSAPP API STATUS
// ==============================================
router.get('/status', async (req, res) => {
    try {
        const status = await whatsappService.checkStatus();

        res.json({
            connected: status.valid,
            device: status.device,
            expired: status.expired,
            testMode: process.env.WA_TEST_MODE === 'true',
            apiToken: process.env.FONNTE_API_TOKEN ? '✓ Set' : '✗ Not Set',
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 📊 GET NOTIFICATION STATISTICS
// ==============================================
router.get('/stats', async (req, res) => {
    try {
        const totalSent = await Notification.countDocuments({ status: 'sent' });
        const totalFailed = await Notification.countDocuments({
            status: 'failed',
        });
        const totalPending = await Notification.countDocuments({
            status: 'pending',
        });

        const last7Days = await Notification.countDocuments({
            createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) },
        });

        const byType = await Notification.aggregate([
            {
                $group: {
                    _id: '$type',
                    count: { $sum: 1 },
                },
            },
        ]);

        res.json({
            total: totalSent + totalFailed + totalPending,
            sent: totalSent,
            failed: totalFailed,
            pending: totalPending,
            last7Days,
            byType,
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 📱 SEND TO WHATSAPP GROUP
// ==============================================
router.post('/send-to-group', async (req, res) => {
    try {
        const { groupId, category = 'friendly', minWeeks = 1 } = req.body;

        if (!groupId) {
            return res.status(400).json({
                error: 'Group ID wajib diisi',
            });
        }

        // Get students yang perlu reminder
        const students = await Student.find({
            status: 'Aktif',
            phoneNumber: { $exists: true, $ne: '' },
        });

        const payments = await Payment.find();

        // Calculate current week
        const startDate = new Date(process.env.START_DATE || '2025-10-27');
        const now = new Date();
        const days = Math.floor((now - startDate) / (24 * 60 * 60 * 1000));
        const currentWeek = Math.max(0, Math.ceil(days / 7) + 1);

        // Filter students with late payments
        const studentsData = [];

        for (const student of students) {
            const studentPayments = payments.filter(
                (p) => p.studentId?.toString() === student._id.toString()
            );

            const totalPaid = studentPayments.reduce(
                (sum, p) => sum + p.amount,
                0
            );
            const weeksPaid = Math.floor(totalPaid / 2000);
            const weeksLate = currentWeek - weeksPaid;
            const amountOwed = weeksLate * 2000;

            if (weeksLate >= minWeeks) {
                studentsData.push({
                    student,
                    weeksLate,
                    amountOwed,
                });
            }
        }

        if (studentsData.length === 0) {
            return res.json({
                success: true,
                message: 'Tidak ada siswa yang perlu diingatkan',
                studentsCount: 0,
            });
        }

        // Send to group
        const result = await whatsappService.sendToGroup(
            groupId,
            studentsData,
            category
        );

        res.json({
            success: result.success,
            message: result.testMode
                ? `Pesan berhasil dibuat (TEST MODE) - ${studentsData.length} siswa akan di-mention`
                : `Pesan berhasil dikirim ke grup dengan ${studentsData.length} mention`,
            studentsCount: studentsData.length,
            messageId: result.messageId,
            testMode: result.testMode,
            students: studentsData.map((s) => ({
                name: s.student.name,
                phone: s.student.phoneNumber,
                weeksLate: s.weeksLate,
                amount: s.amountOwed,
            })),
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 🔍 PREVIEW GROUP MESSAGE
// ==============================================
router.post('/preview-group', async (req, res) => {
    try {
        const { category = 'friendly', minWeeks = 1 } = req.body;

        // Get sample data
        const students = await Student.find({
            status: 'Aktif',
            phoneNumber: { $exists: true, $ne: '' },
        }).limit(5);

        const payments = await Payment.find();

        // Calculate current week
        const startDate = new Date(process.env.START_DATE || '2025-10-27');
        const now = new Date();
        const days = Math.floor((now - startDate) / (24 * 60 * 60 * 1000));
        const currentWeek = Math.max(0, Math.ceil(days / 7) + 1);

        // Create sample data
        const studentsData = [];

        for (const student of students) {
            const studentPayments = payments.filter(
                (p) => p.studentId?.toString() === student._id.toString()
            );

            const totalPaid = studentPayments.reduce(
                (sum, p) => sum + p.amount,
                0
            );
            const weeksPaid = Math.floor(totalPaid / 2000);
            const weeksLate = currentWeek - weeksPaid;
            const amountOwed = weeksLate * 2000;

            if (weeksLate >= minWeeks) {
                studentsData.push({
                    student,
                    weeksLate,
                    amountOwed,
                });
            }
        }

        if (studentsData.length === 0) {
            return res.json({
                message: 'Tidak ada siswa yang cocok untuk preview',
                preview: null,
            });
        }

        // Generate preview
        const message = whatsappService.generateGroupReminderMessage(
            studentsData,
            category
        );

        res.json({
            message,
            category,
            studentsCount: studentsData.length,
            students: studentsData.map((s) => ({
                name: s.student.name,
                phone: s.student.phoneNumber,
                weeksLate: s.weeksLate,
            })),
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 🎉 EVENT REMINDER - SEND TO ONE STUDENT
// ==============================================
router.post('/send-event-reminder/:studentId/:eventId', async (req, res) => {
    try {
        const { category = 'friendly' } = req.body;
        const { studentId, eventId } = req.params;

        const student = await Student.findById(studentId);
        if (!student) {
            return res.status(404).json({ error: 'Siswa tidak ditemukan' });
        }

        // Import Event model
        const Event = (await import('../models/Event.js')).default;
        const event = await Event.findById(eventId);

        if (!event) {
            return res.status(404).json({ error: 'Event tidak ditemukan' });
        }

        if (!student.phoneNumber) {
            return res.status(400).json({
                error: 'Siswa tidak memiliki nomor WhatsApp',
            });
        }

        // Send reminder
        const result = await whatsappService.sendEventReminder(
            student,
            event,
            category
        );

        res.json({
            success: result.success,
            message: result.testMode
                ? 'Reminder berhasil dibuat (TEST MODE)'
                : 'Reminder event berhasil dikirim',
            notification: result.notification,
            testMode: result.testMode,
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 🎉 EVENT REMINDER - SEND BULK
// ==============================================
router.post('/send-event-reminder-bulk/:eventId', async (req, res) => {
    try {
        const { category = 'friendly', studentIds } = req.body;
        const { eventId } = req.params;

        // Import Event model
        const Event = (await import('../models/Event.js')).default;
        const event = await Event.findById(eventId);

        if (!event) {
            return res.status(404).json({ error: 'Event tidak ditemukan' });
        }

        // Get students yang belum bayar
        const allStudents = await Student.find({ status: 'Aktif' });
        const paidStudentIds = event.studentsPaid.map((id) => id.toString());

        let studentsToRemind;
        if (studentIds && studentIds.length > 0) {
            studentsToRemind = await Student.find({
                _id: { $in: studentIds },
                phoneNumber: { $exists: true, $ne: '' },
            });
        } else {
            // Semua yang belum bayar
            studentsToRemind = allStudents.filter(
                (s) =>
                    !paidStudentIds.includes(s._id.toString()) &&
                    s.phoneNumber &&
                    s.enableNotification !== false
            );
        }

        const results = {
            success: [],
            failed: [],
            skipped: [],
        };

        for (const student of studentsToRemind) {
            try {
                const result = await whatsappService.sendEventReminder(
                    student,
                    event,
                    category
                );

                if (result.success) {
                    results.success.push({
                        student: student.name,
                        phone: student.phoneNumber,
                        notificationId: result.notification._id,
                    });
                } else {
                    results.failed.push({
                        student: student.name,
                        error: 'Gagal mengirim',
                    });
                }

                // Delay to avoid rate limit
                await new Promise((resolve) => setTimeout(resolve, 1000));
            } catch (error) {
                results.failed.push({
                    student: student.name,
                    error: error.message,
                });
            }
        }

        res.json({
            message: 'Pengiriman event reminder selesai',
            event: event.name,
            summary: {
                total: studentsToRemind.length,
                success: results.success.length,
                failed: results.failed.length,
            },
            results,
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 🎉 EVENT REMINDER - SEND TO GROUP
// ==============================================
router.post('/send-event-reminder-group/:eventId', async (req, res) => {
    try {
        const { groupId, category = 'friendly' } = req.body;
        const { eventId } = req.params;

        if (!groupId) {
            return res.status(400).json({ error: 'Group ID wajib diisi' });
        }

        // Import Event model
        const Event = (await import('../models/Event.js')).default;
        const event = await Event.findById(eventId);

        if (!event) {
            return res.status(404).json({ error: 'Event tidak ditemukan' });
        }

        // Get students yang belum bayar
        const allStudents = await Student.find({
            status: 'Aktif',
            phoneNumber: { $exists: true, $ne: '' },
        });

        const paidStudentIds = event.studentsPaid.map((id) => id.toString());
        const studentsData = allStudents
            .filter((s) => !paidStudentIds.includes(s._id.toString()))
            .map((student) => ({ student }));

        if (studentsData.length === 0) {
            return res.json({
                success: true,
                message: 'Semua siswa sudah bayar event ini! 🎉',
                studentsCount: 0,
            });
        }

        // Send to group
        const result = await whatsappService.sendEventReminderToGroup(
            groupId,
            studentsData,
            event,
            category
        );

        if (!result.success) {
            return res.status(400).json({
                success: false,
                error: result.error || 'Gagal mengirim pesan',
                detail: result.detail,
                message: `Gagal mengirim reminder: ${
                    result.error || 'Unknown error'
                }`,
            });
        }

        res.json({
            success: result.success,
            message: result.testMode
                ? `Pesan berhasil dibuat (TEST MODE) - ${studentsData.length} siswa akan di-mention`
                : `Reminder event berhasil dikirim ke grup dengan ${studentsData.length} mention`,
            event: event.name,
            studentsCount: studentsData.length,
            messageId: result.messageId,
            testMode: result.testMode,
            detail: result.detail,
        });
    } catch (error) {
        console.error('Route error:', error);
        res.status(500).json({ error: error.message });
    }
});

// ==============================================
// 🔍 PREVIEW EVENT REMINDER
// ==============================================
router.post('/preview-event-reminder/:eventId', async (req, res) => {
    try {
        const { category = 'friendly' } = req.body;
        const { eventId } = req.params;

        // Import Event model
        const Event = (await import('../models/Event.js')).default;
        const event = await Event.findById(eventId);

        if (!event) {
            return res.status(404).json({ error: 'Event tidak ditemukan' });
        }

        // Get sample student
        const student = await Student.findOne({
            status: 'Aktif',
            phoneNumber: { $exists: true, $ne: '' },
        });

        if (!student) {
            return res.json({
                message: 'Tidak ada siswa dengan nomor WA',
                preview: null,
            });
        }

        // Format deadline
        const deadline = new Date(event.endDate).toLocaleDateString('id-ID', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
        });

        // Generate preview
        const message = whatsappService.generateEventReminderMessage(
            student.name,
            event.name,
            event.perStudentAmount,
            deadline,
            category
        );

        res.json({
            message,
            category,
            event: {
                name: event.name,
                amount: event.perStudentAmount,
                deadline,
            },
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Preview event reminder group message
router.post('/preview-event-reminder-group/:eventId', async (req, res) => {
    try {
        const { category = 'friendly' } = req.body;
        const { eventId } = req.params;

        // Import Event model
        const Event = (await import('../models/Event.js')).default;
        const event = await Event.findById(eventId);

        if (!event) {
            return res.status(404).json({ error: 'Event tidak ditemukan' });
        }

        // Get unpaid students with WA
        const allStudents = await Student.find({ status: 'Aktif' });
        const unpaidStudents = allStudents.filter(
            (student) =>
                !event.studentsPaid.some(
                    (paidId) => paidId.toString() === student._id.toString()
                ) &&
                student.phoneNumber &&
                student.phoneNumber.trim() !== ''
        );

        if (unpaidStudents.length === 0) {
            return res.json({
                message: 'Semua siswa sudah bayar atau tidak ada nomor WA',
                preview: null,
            });
        }

        // Prepare studentsData in correct format
        const studentsData = unpaidStudents.map((student) => ({ student }));

        // Generate group message
        const message = whatsappService.generateGroupEventReminderMessage(
            studentsData,
            event,
            category
        );

        res.json({
            message,
            category,
            studentsCount: unpaidStudents.length,
            event: {
                name: event.name,
                amount: event.perStudentAmount,
                deadline: new Date(event.endDate).toLocaleDateString('id-ID'),
            },
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

export default router;


routes/settings.js
import express from 'express';
import Setting from '../models/Setting.js';

const router = express.Router();

// Get all settings
router.get('/', async (req, res) => {
    try {
        const settings = await Setting.find();
        res.json(settings);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Get setting by key
router.get('/:key', async (req, res) => {
    try {
        const setting = await Setting.findOne({ key: req.params.key });
        if (!setting) {
            return res.status(404).json({ message: 'Setting not found' });
        }
        res.json(setting);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Create or update setting
router.post('/', async (req, res) => {
    try {
        const { key, value } = req.body;

        if (!key || value === undefined) {
            return res
                .status(400)
                .json({ message: 'Key and value are required' });
        }

        const setting = await Setting.findOneAndUpdate(
            { key },
            { value },
            { upsert: true, new: true, runValidators: true }
        );

        res.json(setting);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Delete setting
router.delete('/:key', async (req, res) => {
    try {
        const setting = await Setting.findOneAndDelete({ key: req.params.key });
        if (!setting) {
            return res.status(404).json({ message: 'Setting not found' });
        }
        res.json({ message: 'Setting deleted' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

export default router;


routes/student.js
import express from 'express';
import Setting from '../models/Setting.js';

const router = express.Router();

// Get all settings
router.get('/', async (req, res) => {
    try {
        const settings = await Setting.find();
        res.json(settings);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Get setting by key
router.get('/:key', async (req, res) => {
    try {
        const setting = await Setting.findOne({ key: req.params.key });
        if (!setting) {
            return res.status(404).json({ message: 'Setting not found' });
        }
        res.json(setting);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Create or update setting
router.post('/', async (req, res) => {
    try {
        const { key, value } = req.body;

        if (!key || value === undefined) {
            return res
                .status(400)
                .json({ message: 'Key and value are required' });
        }

        const setting = await Setting.findOneAndUpdate(
            { key },
            { value },
            { upsert: true, new: true, runValidators: true }
        );

        res.json(setting);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Delete setting
router.delete('/:key', async (req, res) => {
    try {
        const setting = await Setting.findOneAndDelete({ key: req.params.key });
        if (!setting) {
            return res.status(404).json({ message: 'Setting not found' });
        }
        res.json({ message: 'Setting deleted' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

export default router;


services/notificationScheduler.js
import cron from 'node-cron';
import Student from '../models/Student.js';
import Payment from '../models/Payment.js';
import whatsappService from './whatsappService.js';

class NotificationScheduler {
    constructor() {
        this.jobs = [];
    }

    // Hitung current week
    getCurrentWeek() {
        const startDate = new Date(process.env.START_DATE || '2025-10-27');
        const now = new Date();
        const days = Math.floor((now - startDate) / (24 * 60 * 60 * 1000));
        return Math.max(0, Math.ceil(days / 7) + 1);
    }

    // Get students yang perlu diingatkan
    async getStudentsNeedingReminder(minWeeks = 1) {
        try {
            const students = await Student.find({
                status: 'Aktif',
                phoneNumber: { $exists: true, $ne: '' },
                enableNotification: true,
            });

            const payments = await Payment.find();
            const currentWeek = this.getCurrentWeek();
            const needsReminder = [];

            for (const student of students) {
                const studentPayments = payments.filter(
                    (p) => p.studentId?.toString() === student._id.toString()
                );

                const totalPaid = studentPayments.reduce(
                    (sum, p) => sum + p.amount,
                    0
                );
                const weeksPaid = Math.floor(totalPaid / 2000);
                const weeksLate = currentWeek - weeksPaid;
                const amountOwed = weeksLate * 2000;

                if (weeksLate >= minWeeks) {
                    needsReminder.push({
                        student,
                        weeksLate,
                        amountOwed,
                    });
                }
            }

            return needsReminder;
        } catch (error) {
            console.error(
                'Error getting students for reminder:',
                error.message
            );
            return [];
        }
    }

    // Kirim reminder otomatis
    async sendAutomaticReminders(minWeeks = 2) {
        try {
            console.log('🤖 Starting automatic reminder process...');

            const studentsToRemind = await this.getStudentsNeedingReminder(
                minWeeks
            );

            if (studentsToRemind.length === 0) {
                console.log('✅ No students need reminders at this time');
                return {
                    total: 0,
                    success: 0,
                    failed: 0,
                };
            }

            console.log(
                `📱 Sending reminders to ${studentsToRemind.length} students...`
            );

            let successCount = 0;
            let failedCount = 0;

            // Tentukan kategori berdasarkan hari
            const dayOfWeek = new Date().getDay();
            const categories = [
                'friendly',
                'motivational',
                'gentle',
                'energetic',
                'humorous',
            ];
            const selectedCategory = categories[dayOfWeek % categories.length];

            for (const { student, weeksLate, amountOwed } of studentsToRemind) {
                try {
                    // Hindari spam: cek apakah sudah dikirim dalam 3 hari terakhir
                    if (student.lastNotificationSent) {
                        const daysSinceLastSent = Math.floor(
                            (Date.now() -
                                student.lastNotificationSent.getTime()) /
                                (24 * 60 * 60 * 1000)
                        );

                        if (daysSinceLastSent < 3) {
                            console.log(
                                `⏭️  Skipping ${student.name} (last sent ${daysSinceLastSent} days ago)`
                            );
                            continue;
                        }
                    }

                    const result = await whatsappService.sendPaymentReminder(
                        student,
                        weeksLate,
                        amountOwed,
                        selectedCategory
                    );

                    if (result.success) {
                        successCount++;
                        console.log(
                            `✅ Sent to ${student.name} (${weeksLate} weeks late)`
                        );
                    } else {
                        failedCount++;
                        console.log(`❌ Failed to send to ${student.name}`);
                    }

                    // Delay 2 detik antar pesan untuk avoid rate limit
                    await new Promise((resolve) => setTimeout(resolve, 2000));
                } catch (error) {
                    failedCount++;
                    console.error(
                        `Error sending to ${student.name}:`,
                        error.message
                    );
                }
            }

            console.log(`\n📊 Reminder Summary:`);
            console.log(`   Total: ${studentsToRemind.length}`);
            console.log(`   Success: ${successCount}`);
            console.log(`   Failed: ${failedCount}`);

            return {
                total: studentsToRemind.length,
                success: successCount,
                failed: failedCount,
            };
        } catch (error) {
            console.error('Error in automatic reminder:', error.message);
            return {
                total: 0,
                success: 0,
                failed: 0,
                error: error.message,
            };
        }
    }

    // Setup cron jobs
    setupSchedules() {
        // ========================================
        // 📅 SCHEDULE 1: Senin pagi jam 07:00
        // ========================================
        const mondayMorning = cron.schedule(
            '0 7 * * 1',
            async () => {
                console.log(
                    '\n⏰ [MONDAY REMINDER] Running Monday morning reminder...'
                );
                await this.sendAutomaticReminders(1); // Kirim ke yang telat ≥ 1 minggu
            },
            {
                scheduled: false,
                timezone: 'Asia/Jakarta',
            }
        );

        // ========================================
        // 📅 SCHEDULE 2: Jumat sore jam 15:00
        // ========================================
        const fridayAfternoon = cron.schedule(
            '0 15 * * 5',
            async () => {
                console.log(
                    '\n⏰ [FRIDAY REMINDER] Running Friday afternoon reminder...'
                );
                await this.sendAutomaticReminders(2); // Kirim ke yang telat ≥ 2 minggu
            },
            {
                scheduled: false,
                timezone: 'Asia/Jakarta',
            }
        );

        // ========================================
        // 📅 SCHEDULE 3: Setiap hari jam 10:00 (optional)
        // ========================================
        const dailyReminder = cron.schedule(
            '0 10 * * *',
            async () => {
                console.log(
                    '\n⏰ [DAILY CHECK] Checking for urgent reminders...'
                );
                await this.sendAutomaticReminders(4); // Hanya yang telat ≥ 4 minggu
            },
            {
                scheduled: false,
                timezone: 'Asia/Jakarta',
            }
        );

        this.jobs = [
            {
                name: 'Monday Morning',
                job: mondayMorning,
                schedule: 'Every Monday 07:00',
            },
            {
                name: 'Friday Afternoon',
                job: fridayAfternoon,
                schedule: 'Every Friday 15:00',
            },
            {
                name: 'Daily Urgent',
                job: dailyReminder,
                schedule: 'Every day 10:00',
            },
        ];

        console.log('\n⏰ Notification Scheduler initialized!');
        console.log('📅 Scheduled jobs:');
        this.jobs.forEach(({ name, schedule }) => {
            console.log(`   - ${name}: ${schedule}`);
        });
    }

    // Start semua scheduled jobs
    start() {
        this.setupSchedules();

        // Enable berdasarkan environment variable
        const autoReminderEnabled =
            process.env.AUTO_REMINDER_ENABLED === 'true';

        if (autoReminderEnabled) {
            this.jobs.forEach(({ name, job }) => {
                job.start();
                console.log(`✅ Started: ${name}`);
            });
            console.log('\n✅ All scheduled jobs are now running!\n');
        } else {
            console.log('\n⚠️  Auto-reminder is DISABLED');
            console.log(
                '   Set AUTO_REMINDER_ENABLED=true in .env to enable\n'
            );
        }
    }

    // Stop semua scheduled jobs
    stop() {
        this.jobs.forEach(({ name, job }) => {
            job.stop();
            console.log(`⏹️  Stopped: ${name}`);
        });
    }

    // Get status semua jobs
    getStatus() {
        return this.jobs.map(({ name, schedule, job }) => ({
            name,
            schedule,
            running: job.running || false,
        }));
    }
}

// Export singleton instance
export default new NotificationScheduler();


services/whatsappService.js
import cron from 'node-cron';
import Student from '../models/Student.js';
import Payment from '../models/Payment.js';
import whatsappService from './whatsappService.js';

class NotificationScheduler {
    constructor() {
        this.jobs = [];
    }

    // Hitung current week
    getCurrentWeek() {
        const startDate = new Date(process.env.START_DATE || '2025-10-27');
        const now = new Date();
        const days = Math.floor((now - startDate) / (24 * 60 * 60 * 1000));
        return Math.max(0, Math.ceil(days / 7) + 1);
    }

    // Get students yang perlu diingatkan
    async getStudentsNeedingReminder(minWeeks = 1) {
        try {
            const students = await Student.find({
                status: 'Aktif',
                phoneNumber: { $exists: true, $ne: '' },
                enableNotification: true,
            });

            const payments = await Payment.find();
            const currentWeek = this.getCurrentWeek();
            const needsReminder = [];

            for (const student of students) {
                const studentPayments = payments.filter(
                    (p) => p.studentId?.toString() === student._id.toString()
                );

                const totalPaid = studentPayments.reduce(
                    (sum, p) => sum + p.amount,
                    0
                );
                const weeksPaid = Math.floor(totalPaid / 2000);
                const weeksLate = currentWeek - weeksPaid;
                const amountOwed = weeksLate * 2000;

                if (weeksLate >= minWeeks) {
                    needsReminder.push({
                        student,
                        weeksLate,
                        amountOwed,
                    });
                }
            }

            return needsReminder;
        } catch (error) {
            console.error(
                'Error getting students for reminder:',
                error.message
            );
            return [];
        }
    }

    // Kirim reminder otomatis
    async sendAutomaticReminders(minWeeks = 2) {
        try {
            console.log('🤖 Starting automatic reminder process...');

            const studentsToRemind = await this.getStudentsNeedingReminder(
                minWeeks
            );

            if (studentsToRemind.length === 0) {
                console.log('✅ No students need reminders at this time');
                return {
                    total: 0,
                    success: 0,
                    failed: 0,
                };
            }

            console.log(
                `📱 Sending reminders to ${studentsToRemind.length} students...`
            );

            let successCount = 0;
            let failedCount = 0;

            // Tentukan kategori berdasarkan hari
            const dayOfWeek = new Date().getDay();
            const categories = [
                'friendly',
                'motivational',
                'gentle',
                'energetic',
                'humorous',
            ];
            const selectedCategory = categories[dayOfWeek % categories.length];

            for (const { student, weeksLate, amountOwed } of studentsToRemind) {
                try {
                    // Hindari spam: cek apakah sudah dikirim dalam 3 hari terakhir
                    if (student.lastNotificationSent) {
                        const daysSinceLastSent = Math.floor(
                            (Date.now() -
                                student.lastNotificationSent.getTime()) /
                                (24 * 60 * 60 * 1000)
                        );

                        if (daysSinceLastSent < 3) {
                            console.log(
                                `⏭️  Skipping ${student.name} (last sent ${daysSinceLastSent} days ago)`
                            );
                            continue;
                        }
                    }

                    const result = await whatsappService.sendPaymentReminder(
                        student,
                        weeksLate,
                        amountOwed,
                        selectedCategory
                    );

                    if (result.success) {
                        successCount++;
                        console.log(
                            `✅ Sent to ${student.name} (${weeksLate} weeks late)`
                        );
                    } else {
                        failedCount++;
                        console.log(`❌ Failed to send to ${student.name}`);
                    }

                    // Delay 2 detik antar pesan untuk avoid rate limit
                    await new Promise((resolve) => setTimeout(resolve, 2000));
                } catch (error) {
                    failedCount++;
                    console.error(
                        `Error sending to ${student.name}:`,
                        error.message
                    );
                }
            }

            console.log(`\n📊 Reminder Summary:`);
            console.log(`   Total: ${studentsToRemind.length}`);
            console.log(`   Success: ${successCount}`);
            console.log(`   Failed: ${failedCount}`);

            return {
                total: studentsToRemind.length,
                success: successCount,
                failed: failedCount,
            };
        } catch (error) {
            console.error('Error in automatic reminder:', error.message);
            return {
                total: 0,
                success: 0,
                failed: 0,
                error: error.message,
            };
        }
    }

    // Setup cron jobs
    setupSchedules() {
        // ========================================
        // 📅 SCHEDULE 1: Senin pagi jam 07:00
        // ========================================
        const mondayMorning = cron.schedule(
            '0 7 * * 1',
            async () => {
                console.log(
                    '\n⏰ [MONDAY REMINDER] Running Monday morning reminder...'
                );
                await this.sendAutomaticReminders(1); // Kirim ke yang telat ≥ 1 minggu
            },
            {
                scheduled: false,
                timezone: 'Asia/Jakarta',
            }
        );

        // ========================================
        // 📅 SCHEDULE 2: Jumat sore jam 15:00
        // ========================================
        const fridayAfternoon = cron.schedule(
            '0 15 * * 5',
            async () => {
                console.log(
                    '\n⏰ [FRIDAY REMINDER] Running Friday afternoon reminder...'
                );
                await this.sendAutomaticReminders(2); // Kirim ke yang telat ≥ 2 minggu
            },
            {
                scheduled: false,
                timezone: 'Asia/Jakarta',
            }
        );

        // ========================================
        // 📅 SCHEDULE 3: Setiap hari jam 10:00 (optional)
        // ========================================
        const dailyReminder = cron.schedule(
            '0 10 * * *',
            async () => {
                console.log(
                    '\n⏰ [DAILY CHECK] Checking for urgent reminders...'
                );
                await this.sendAutomaticReminders(4); // Hanya yang telat ≥ 4 minggu
            },
            {
                scheduled: false,
                timezone: 'Asia/Jakarta',
            }
        );

        this.jobs = [
            {
                name: 'Monday Morning',
                job: mondayMorning,
                schedule: 'Every Monday 07:00',
            },
            {
                name: 'Friday Afternoon',
                job: fridayAfternoon,
                schedule: 'Every Friday 15:00',
            },
            {
                name: 'Daily Urgent',
                job: dailyReminder,
                schedule: 'Every day 10:00',
            },
        ];

        console.log('\n⏰ Notification Scheduler initialized!');
        console.log('📅 Scheduled jobs:');
        this.jobs.forEach(({ name, schedule }) => {
            console.log(`   - ${name}: ${schedule}`);
        });
    }

    // Start semua scheduled jobs
    start() {
        this.setupSchedules();

        // Enable berdasarkan environment variable
        const autoReminderEnabled =
            process.env.AUTO_REMINDER_ENABLED === 'true';

        if (autoReminderEnabled) {
            this.jobs.forEach(({ name, job }) => {
                job.start();
                console.log(`✅ Started: ${name}`);
            });
            console.log('\n✅ All scheduled jobs are now running!\n');
        } else {
            console.log('\n⚠️  Auto-reminder is DISABLED');
            console.log(
                '   Set AUTO_REMINDER_ENABLED=true in .env to enable\n'
            );
        }
    }

    // Stop semua scheduled jobs
    stop() {
        this.jobs.forEach(({ name, job }) => {
            job.stop();
            console.log(`⏹️  Stopped: ${name}`);
        });
    }

    // Get status semua jobs
    getStatus() {
        return this.jobs.map(({ name, schedule, job }) => ({
            name,
            schedule,
            running: job.running || false,
        }));
    }
}

// Export singleton instance
export default new NotificationScheduler();


server.js
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import connectDB from './config/database.js';
import studentRoutes from './routes/student.js';
import paymentRoutes from './routes/payments.js';
import expenseRoutes from './routes/expenses.js';
import settingRoutes from './routes/settings.js';
import eventRoutes from './routes/events.js';
import notificationRoutes from './routes/notifications.js';
import notificationScheduler from './services/notificationScheduler.js';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Connect to MongoDB
connectDB();

// API Routes
app.use('/api/students', studentRoutes);
app.use('/api/payments', paymentRoutes);
app.use('/api/expenses', expenseRoutes);
app.use('/api/settings', settingRoutes);
app.use('/api/events', eventRoutes);
app.use('/api/notifications', notificationRoutes);

// Health check
app.get('/api/health', (req, res) => {
    res.json({ status: 'OK', message: 'Server is running' });
});

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
    app.use(express.static(path.join(__dirname, '../client/dist')));

    app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, '../client/dist/index.html'));
    });
}

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: 'Something went wrong!' });
});

app.listen(PORT, () => {
    console.log(`🚀 Server is running on port ${PORT}`);

    // Start notification scheduler
    notificationScheduler.start();
});
